;;; -*- Mode: Emacs-Lisp -*-
;;;
;;; htmlize-symbols-common-lisp.el --- Htmlize Common Lisp hacks
;;;
;;; Time-stamp: <Sunday Jan 29, 2012 00:39:50 asmodai>
;;; Revision:   18
;;;
;;; Copyright (c) 2011-2012 Paul Ward <asmodai@gmail.com>
;;; Copyright (c) 2007, Volkan YAZICI <volkan.yazici@gmail.com>
;;;
;;; Author:     Paul Ward <asmodai@gmail.com>
;;; Maintainer: Paul Ward <asmodai@gmail.com>
;;; Created:    Wed Jan 19 08:52:13 2011
;;; Keywords:   
;;; URL:        http://unixware.kicks-ass.org/
;;;
;;;}}} License:
;;;
;;; Redistribution and use in source and binary forms, with or without
;;; modification, are  permitted provided that the following conditions are
;;; met:
;;;
;;; Redistributions of source code must retain the above copyright notice,
;;; this list of conditions and the following disclaimer. 
;;;
;;; Redistributions in binary form must reproduce the above copyright
;;; notice, this list of conditions and the following disclaimer in the
;;; documentation and/or other materials provided with the distribution.
;;;
;;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
;;; IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
;;; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
;;; PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
;;; OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;;; EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;;; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;; PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;; NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;
;;;}}}
;;;}}} Commentary:
;;;
;;;}}}

;;; ==================================================================
;;;}}} Base URI:

(defvar *clhs-base-uri* "http://www.lispworks.com/reference/HyperSpec/"
  "Common Lisp HyperSpec URI.")

;;;}}}
;;; ==================================================================

;;; ==================================================================
;;;}}} Symbols that already have font-lock info in Emacs:

(defvar *clhs-no-font-lock*
  '(("defclass" . "Body/m_defcla.htm")
    ("defgeneric" . "Body/m_defgen.htm")
    ("define-compiler-macro" . "Body/m_define.htm")
    ("define-condition" . "Body/m_defi_5.htm")
    ("define-method-combination" . "Body/m_defi_4.htm")
    ("define-modify-macro" . "Body/m_defi_2.htm")
    ("define-setf-expander" . "Body/m_defi_3.htm")
    ("define-symbol-macro" . "Body/m_defi_1.htm")
    ("defmacro" . "Body/m_defmac.htm")
    ("defmethod" . "Body/m_defmet.htm")
    ("defconstant" . "Body/m_defcon.htm")
    ("defparameter" . "Body/m_defpar.htm")
    ("defsetf" . "Body/m_defset.htm")
    ("defstruct" . "Body/m_defstr.htm")
    ("deftype" . "Body/m_deftp.htm")
    ("defun" . "Body/m_defun.htm")
    ("defpackage" . "Body/m_defpkg.htm")
    ("defvar" . "Body/m_defpar.htm")
    ("cond" . "Body/m_cond.htm")
    ("if" . "Body/s_if.htm")
    ("let" . "Body/s_let_l.htm")
    ("let*" . "Body/s_let_l.htm")
    ("progn" . "Body/s_progn.htm")
    ("progv" . "Body/s_progv.htm")
    ("prog" . "Body/m_prog_.htm")
    ("prog1" . "Body/m_prog1c.htm")
    ("prog2" . "Body/m_prog1c.htm")
    ("prog*" . "Body/m_prog_.htm")
    ("lambda" . "Body/a_lambda.htm")
    ("unwind-protect" . "Body/s_unwind.htm")
    ("eval-when" . "Body/s_eval_w.htm")
    ("with-output-to-string" . "Body/m_w_out_.htm")
    ("when" . "Body/m_when_.htm")
    ("case" . "Body/m_case_.htm")
    ("ccase" . "Body/m_case_.htm")
    ("ctypecase" . "Body/m_tpcase.htm")
    ("ecase" . "Body/m_case_.htm")
    ("etypecase" . "Body/m_tpcase.htm")
    ("handler-bind" . "Body/m_handle.htm")
    ("handler-case" . "Body/m_hand_1.htm")
    ("restart-bind" . "Body/m_rst_bi.htm")
    ("restart-case" . "Body/m_rst_ca.htm")
    ("in-package" . "Body/m_in_pkg.htm")
    ("break" . "Body/f_break.htm")
    ("ignore-errors" . "Body/m_ignore.htm")
    ("loop" . "Body/m_loop.htm")
    ("do" . "Body/m_do_do.htm")
    ("do*" . "Body/m_do_do.htm")
    ("dolist" . "Body/m_dolist.htm")
    ("dotimes" . "Body/m_dotime.htm")
    ("the" . "Body/s_the.htm")
    ("locally" . "Body/s_locall.htm")
    ("proclaim" . "Body/f_procla.htm")
    ("declaim" . "Body/m_declai.htm")
    ("declare" . "Body/s_declar.htm")
    ("symbol-macrolet" . "Body/s_symbol.htm")
    ("flet" . "Body/s_flet_.htm")
    ("labels" . "Body/s_flet_.htm")
    ("destructuring-bind" . "Body/m_destru.htm")
    ("macrolet" . "Body/s_flet_.htm")
    ("tagbody" . "Body/s_tagbod.htm")
    ("block" . "Body/s_block.htm")
    ("go" . "Body/s_go.htm")
    ("multiple-value-prog1" . "Body/s_mult_1.htm")
    ("multiple-value-bind" . "Body/m_multip.htm")
    ("return" . "Body/m_return.htm")
    ("return-from" . "Body/s_ret_fr.htm")
    ("with-accessors" . "Body/m_w_acce.htm")
    ("with-compilation-unit" . "Body/m_w_comp.htm")
    ("with-condition-restarts" . "Body/m_w_cnd_.htm")
    ("with-hash-table-iterator" . "Body/m_w_hash.htm")
    ("with-input-from-string" . "Body/m_w_in_f.htm")
    ("with-open-file" . "Body/m_w_open.htm")
    ("with-open-stream" . "Body/m_w_op_1.htm")
    ("with-package-iterator" . "Body/m_w_pkg_.htm")
    ("with-simple-restart" . "Body/m_w_smp_.htm")
    ("with-slots" . "Body/m_w_slts.htm")
    ("with-standard-io-syntax" . "Body/m_w_std_.htm")
    ("catch" . "Body/s_catch.htm")
    ("throw" . "Body/s_throw.htm")
    ("provide" . "Body/f_provid.htm")
    ("require" . "Body/f_provid.htm")
    ("abort" . "Body/a_abort.htm")
    ("assert" . "Body/m_assert.htm")
    ("warn" . "Body/f_warn.htm")
    ("check-type" . "Body/m_check_.htm")
    ("cerror" . "Body/f_cerror.htm")
    ("error" . "Body/a_error.htm")
    ("signal" . "Body/f_signal.htm"))
  "Common Lisp symbols already handled by Emacs font locking.")

;;;}}}
;;; ==================================================================

;;; ==================================================================
;;;}}} Lambda list keywords:

(defvar *clhs-lambda-list-keywords*
  '(("&amp;allow-other-keys" . "Body/03_da.htm")
    ("&amp;aux" . "Body/03_da.htm")
    ("&amp;body" . "Body/03_dd.htm")
    ("&amp;environment" . "Body/03_dd.htm")
    ("&amp;key" . "Body/03_da.htm")
    ("&amp;optional" . "Body/03_da.htm")
    ("&amp;rest" . "Body/03_da.htm")
    ("&amp;whole" . "Body/03_dd.htm"))
  "Common Lisp lambda list keywords")

;;;}}}
;;; ==================================================================

;;; ==================================================================
;;;}}} Variables:

(defvar *clhs-variables*
  '(("**" . "Body/v__stst_.htm")
    ("***" . "Body/v__stst_.htm")
    ("*break-on-signals*" . "Body/v_break_.htm")
    ("*compile-file-pathname*" . "Body/v_cmp_fi.htm")
    ("*compile-file-truename*" . "Body/v_cmp_fi.htm")
    ("*compile-print*" . "Body/v_cmp_pr.htm")
    ("*compile-verbose*" . "Body/v_cmp_pr.htm")
    ("*debug-io*" . "Body/v_debug_.htm")
    ("*debugger-hook*" . "Body/v_debugg.htm")
    ("*default-pathname-defaults*" . "Body/v_defaul.htm")
    ("*error-output*" . "Body/v_debug_.htm")
    ("*features*" . "Body/v_featur.htm")
    ("*gensym-counter*" . "Body/v_gensym.htm")
    ("*load-pathname*" . "Body/v_ld_pns.htm")
    ("*load-print*" . "Body/v_ld_prs.htm")
    ("*load-truename*" . "Body/v_ld_pns.htm")
    ("*load-verbose*" . "Body/v_ld_prs.htm")
    ("*macroexpand-hook*" . "Body/v_mexp_h.htm")
    ("*modules*" . "Body/v_module.htm")
    ("*package*" . "Body/v_pkg.htm")
    ("*print-array*" . "Body/v_pr_ar.htm")
    ("*print-base*" . "Body/v_pr_bas.htm")
    ("*print-case*" . "Body/v_pr_cas.htm")
    ("*print-circle*" . "Body/v_pr_cir.htm")
    ("*print-escape*" . "Body/v_pr_esc.htm")
    ("*print-gensym*" . "Body/v_pr_gen.htm")
    ("*print-length*" . "Body/v_pr_lev.htm")
    ("*print-level*" . "Body/v_pr_lev.htm")
    ("*print-lines*" . "Body/v_pr_lin.htm")
    ("*print-miser-width*" . "Body/v_pr_mis.htm")
    ("*print-pprint-dispatch*" . "Body/v_pr_ppr.htm")
    ("*print-pretty*" . "Body/v_pr_pre.htm")
    ("*print-radix*" . "Body/v_pr_bas.htm")
    ("*print-readably*" . "Body/v_pr_rda.htm")
    ("*print-right-margin*" . "Body/v_pr_rig.htm")
    ("*query-io*" . "Body/v_debug_.htm")
    ("*random-state*" . "Body/v_rnd_st.htm")
    ("*read-base*" . "Body/v_rd_bas.htm")
    ("*read-default-float-format*" . "Body/v_rd_def.htm")
    ("*read-eval*" . "Body/v_rd_eva.htm")
    ("*read-suppress*" . "Body/v_rd_sup.htm")
    ("*readtable*" . "Body/v_rdtabl.htm")
    ("*standard-input*" . "Body/v_debug_.htm")
    ("*standard-output*" . "Body/v_debug_.htm")
    ("*terminal-io*" . "Body/v_termin.htm")
    ("*trace-output*" . "Body/v_debug_.htm")
    ("++" . "Body/v_pl_plp.htm")
    ("+++" . "Body/v_pl_plp.htm")
    ("//" . "Body/v_sl_sls.htm")
    ("///" . "Body/v_sl_sls.htm")
    ("array-dimension-limit" . "Body/v_ar_dim.htm")
    ("array-rank-limit" . "Body/v_ar_ran.htm")
    ("array-total-size-limit" . "Body/v_ar_tot.htm")
    ("boole-1" . "Body/v_b_1_b.htm")
    ("boole-2" . "Body/v_b_1_b.htm")
    ("boole-and" . "Body/v_b_1_b.htm")
    ("boole-andc1" . "Body/v_b_1_b.htm")
    ("boole-andc2" . "Body/v_b_1_b.htm")
    ("boole-c1" . "Body/v_b_1_b.htm")
    ("boole-c2" . "Body/v_b_1_b.htm")
    ("boole-clr" . "Body/v_b_1_b.htm")
    ("boole-eqv" . "Body/v_b_1_b.htm")
    ("boole-ior" . "Body/v_b_1_b.htm")
    ("boole-nand" . "Body/v_b_1_b.htm")
    ("boole-nor" . "Body/v_b_1_b.htm")
    ("boole-orc1" . "Body/v_b_1_b.htm")
    ("boole-orc2" . "Body/v_b_1_b.htm")
    ("boole-set" . "Body/v_b_1_b.htm")
    ("boole-xor" . "Body/v_b_1_b.htm")
    ("call-arguments-limit" . "Body/v_call_a.htm")
    ("char-code-limit" . "Body/v_char_c.htm")
    ("double-float-epsilon" . "Body/v_short_.htm")
    ("double-float-negative-epsilon" . "Body/v_short_.htm")
    ("internal-time-units-per-second" . "Body/v_intern.htm")
    ("lambda-list-keywords" . "Body/v_lambda.htm")
    ("lambda-parameters-limit" . "Body/v_lamb_1.htm")
    ("least-negative-double-float" . "Body/v_most_1.htm")
    ("least-negative-long-float" . "Body/v_most_1.htm")
    ("least-negative-normalized-double-float" . "Body/v_most_1.htm")
    ("least-negative-normalized-long-float" . "Body/v_most_1.htm")
    ("least-negative-normalized-short-float" . "Body/v_most_1.htm")
    ("least-negative-normalized-single-float" . "Body/v_most_1.htm")
    ("least-negative-short-float" . "Body/v_most_1.htm")
    ("least-negative-single-float" . "Body/v_most_1.htm")
    ("least-positive-double-float" . "Body/v_most_1.htm")
    ("least-positive-long-float" . "Body/v_most_1.htm")
    ("least-positive-normalized-double-float" . "Body/v_most_1.htm")
    ("least-positive-normalized-long-float" . "Body/v_most_1.htm")
    ("least-positive-normalized-short-float" . "Body/v_most_1.htm")
    ("least-positive-normalized-single-float" . "Body/v_most_1.htm")
    ("least-positive-short-float" . "Body/v_most_1.htm")
    ("least-positive-single-float" . "Body/v_most_1.htm")
    ("long-float-epsilon" . "Body/v_short_.htm")
    ("long-float-negative-epsilon" . "Body/v_short_.htm")
    ("most-negative-double-float" . "Body/v_most_1.htm")
    ("most-negative-fixnum" . "Body/v_most_p.htm")
    ("most-negative-long-float" . "Body/v_most_1.htm")
    ("most-negative-short-float" . "Body/v_most_1.htm")
    ("most-negative-single-float" . "Body/v_most_1.htm")
    ("most-positive-double-float" . "Body/v_most_1.htm")
    ("most-positive-fixnum" . "Body/v_most_p.htm")
    ("most-positive-long-float" . "Body/v_most_1.htm")
    ("most-positive-short-float" . "Body/v_most_1.htm")
    ("most-positive-single-float" . "Body/v_most_1.htm")
    ("multiple-values-limit" . "Body/v_multip.htm")
    ("pi" . "Body/v_pi.htm")
    ("short-float-epsilon" . "Body/v_short_.htm")
    ("short-float-negative-epsilon" . "Body/v_short_.htm")
    ("single-float-epsilon" . "Body/v_short_.htm")
    ("single-float-negative-epsilon" . "Body/v_short_.htm"))
  "Common Lisp variables.")

;;;}}}
;;; ==================================================================

;;; ==================================================================
;;;}}} Ambiguous symbols:

(defvar *clhs-ambiguous-symbols*
  '(("*" . "Body/a_st.htm")
    ("+" . "Body/a_pl.htm")
    ("-" . "Body/a__.htm")
    ("/" . "Body/a_sl.htm")
    ("and" . "Body/a_and.htm")
    ("atom" . "Body/a_atom.htm")
    ("bit" . "Body/a_bit.htm")
    ("character" . "Body/a_ch.htm")
    ("complex" . "Body/a_comple.htm")
    ("cons" . "Body/a_cons.htm")
    ("continue" . "Body/a_contin.htm")
    ("eql" . "Body/a_eql.htm")
    ("float" . "Body/a_float.htm")
    ("function" . "Body/a_fn.htm")
    ("list" . "Body/a_list.htm")
    ("logical-pathname" . "Body/a_logica.htm")
    ("member" . "Body/a_member.htm")
    ("method-combination" . "Body/a_method.htm")
    ("mod" . "Body/a_mod.htm")
    ("muffle-warning" . "Body/a_muffle.htm")
    ("nil" . "Body/a_nil.htm")
    ("not" . "Body/a_not.htm")
    ("null" . "Body/a_null.htm")
    ("or" . "Body/a_or.htm")
    ("pathname" . "Body/a_pn.htm")
    ("rational" . "Body/a_ration.htm")
    ("setf" . "Body/a_setf.htm")
    ("store-value" . "Body/a_store_.htm")
    ("string" . "Body/a_string.htm")
    ("t" . "Body/a_t.htm")
    ("type" . "Body/a_type.htm")
    ("use-value" . "Body/a_use_va.htm")
    ("values" . "Body/a_values.htm")
    ("vector" . "Body/a_vector.htm"))
  "Common Lisp symbols that have ambiguity.")

;;;}}}
;;; ==================================================================

;;; ==================================================================
;;;}}} Functions:

(defvar *clhs-functions*
  '(("/=" . "Body/f_eq_sle.htm")
    ("1+" . "Body/f_1pl_1_.htm")
    ("1-" . "Body/f_1pl_1_.htm")
    ("<" . "Body/f_eq_sle.htm")
    ("<=" . "Body/f_eq_sle.htm")
    ("=" . "Body/f_eq_sle.htm")
    (">" . "Body/f_eq_sle.htm")
    (">=" . "Body/f_eq_sle.htm")
    ("abs" . "Body/f_abs.htm")
    ("acons" . "Body/f_acons.htm")
    ("acos" . "Body/f_asin_.htm")
    ("acosh" . "Body/f_sinh_.htm")
    ("add-method" . "Body/f_add_me.htm")
    ("adjoin" . "Body/f_adjoin.htm")
    ("adjust-array" . "Body/f_adjust.htm")
    ("adjustable-array-p" . "Body/f_adju_1.htm")
    ("allocate-instance" . "Body/f_alloca.htm")
    ("alpha-char-p" . "Body/f_alpha_.htm")
    ("alphanumericp" . "Body/f_alphan.htm")
    ("append" . "Body/f_append.htm")
    ("apply" . "Body/f_apply.htm")
    ("apropos" . "Body/f_apropo.htm")
    ("apropos-list" . "Body/f_apropo.htm")
    ("aref" . "Body/f_aref.htm")
    ("arithmetic-error-operands" . "Body/f_arithm.htm")
    ("arithmetic-error-operation" . "Body/f_arithm.htm")
    ("array-dimension" . "Body/f_ar_dim.htm")
    ("array-dimensions" . "Body/f_ar_d_1.htm")
    ("array-displacement" . "Body/f_ar_dis.htm")
    ("array-element-type" . "Body/f_ar_ele.htm")
    ("array-has-fill-pointer-p" . "Body/f_ar_has.htm")
    ("array-in-bounds-p" . "Body/f_ar_in_.htm")
    ("array-rank" . "Body/f_ar_ran.htm")
    ("array-row-major-index" . "Body/f_ar_row.htm")
    ("array-total-size" . "Body/f_ar_tot.htm")
    ("arrayp" . "Body/f_arrayp.htm")
    ("ash" . "Body/f_ash.htm")
    ("asin" . "Body/f_asin_.htm")
    ("asinh" . "Body/f_sinh_.htm")
    ("assoc" . "Body/f_assocc.htm")
    ("assoc-if" . "Body/f_assocc.htm")
    ("assoc-if-not" . "Body/f_assocc.htm")
    ("atan" . "Body/f_asin_.htm")
    ("atanh" . "Body/f_sinh_.htm")
    ("bit-and" . "Body/f_bt_and.htm")
    ("bit-andc1" . "Body/f_bt_and.htm")
    ("bit-andc2" . "Body/f_bt_and.htm")
    ("bit-eqv" . "Body/f_bt_and.htm")
    ("bit-ior" . "Body/f_bt_and.htm")
    ("bit-nand" . "Body/f_bt_and.htm")
    ("bit-nor" . "Body/f_bt_and.htm")
    ("bit-not" . "Body/f_bt_and.htm")
    ("bit-orc1" . "Body/f_bt_and.htm")
    ("bit-orc2" . "Body/f_bt_and.htm")
    ("bit-vector-p" . "Body/f_bt_vec.htm")
    ("bit-xor" . "Body/f_bt_and.htm")
    ("boole" . "Body/f_boole.htm")
    ("both-case-p" . "Body/f_upper_.htm")
    ("boundp" . "Body/f_boundp.htm")
    ("broadcast-stream-streams" . "Body/f_broadc.htm")
    ("butlast" . "Body/f_butlas.htm")
    ("byte" . "Body/f_by_by.htm")
    ("byte-position" . "Body/f_by_by.htm")
    ("byte-size" . "Body/f_by_by.htm")
    ("caaaar" . "Body/f_car_c.htm")
    ("caaadr" . "Body/f_car_c.htm")
    ("caaar" . "Body/f_car_c.htm")
    ("caadar" . "Body/f_car_c.htm")
    ("caaddr" . "Body/f_car_c.htm")
    ("caadr" . "Body/f_car_c.htm")
    ("caar" . "Body/f_car_c.htm")
    ("cadaar" . "Body/f_car_c.htm")
    ("cadadr" . "Body/f_car_c.htm")
    ("cadar" . "Body/f_car_c.htm")
    ("caddar" . "Body/f_car_c.htm")
    ("cadddr" . "Body/f_car_c.htm")
    ("caddr" . "Body/f_car_c.htm")
    ("cadr" . "Body/f_car_c.htm")
    ("call-next-method" . "Body/f_call_n.htm")
    ("car" . "Body/f_car_c.htm")
    ("cdaaar" . "Body/f_car_c.htm")
    ("cdaadr" . "Body/f_car_c.htm")
    ("cdaar" . "Body/f_car_c.htm")
    ("cdadar" . "Body/f_car_c.htm")
    ("cdaddr" . "Body/f_car_c.htm")
    ("cdadr" . "Body/f_car_c.htm")
    ("cdar" . "Body/f_car_c.htm")
    ("cddaar" . "Body/f_car_c.htm")
    ("cddadr" . "Body/f_car_c.htm")
    ("cddar" . "Body/f_car_c.htm")
    ("cdddar" . "Body/f_car_c.htm")
    ("cddddr" . "Body/f_car_c.htm")
    ("cdddr" . "Body/f_car_c.htm")
    ("cddr" . "Body/f_car_c.htm")
    ("cdr" . "Body/f_car_c.htm")
    ("ceiling" . "Body/f_floorc.htm")
    ("cell-error-name" . "Body/f_cell_e.htm")
    ("change-class" . "Body/f_chg_cl.htm")
    ("char" . "Body/f_char_.htm")
    ("char-code" . "Body/f_char_c.htm")
    ("char-downcase" . "Body/f_char_u.htm")
    ("char-equal" . "Body/f_chareq.htm")
    ("char-greaterp" . "Body/f_chareq.htm")
    ("char-int" . "Body/f_char_i.htm")
    ("char-lessp" . "Body/f_chareq.htm")
    ("char-name" . "Body/f_char_n.htm")
    ("char-not-equal" . "Body/f_chareq.htm")
    ("char-not-greaterp" . "Body/f_chareq.htm")
    ("char-not-lessp" . "Body/f_chareq.htm")
    ("char-upcase" . "Body/f_char_u.htm")
    ("char/=" . "Body/f_chareq.htm")
    ("char<" . "Body/f_chareq.htm")
    ("char<=" . "Body/f_chareq.htm")
    ("char=" . "Body/f_chareq.htm")
    ("char>" . "Body/f_chareq.htm")
    ("char>=" . "Body/f_chareq.htm")
    ("characterp" . "Body/f_chp.htm")
    ("cis" . "Body/f_cis.htm")
    ("class-name" . "Body/f_class_.htm")
    ("class-of" . "Body/f_clas_1.htm")
    ("clear-input" . "Body/f_clear_.htm")
    ("clear-output" . "Body/f_finish.htm")
    ("close" . "Body/f_close.htm")
    ("clrhash" . "Body/f_clrhas.htm")
    ("code-char" . "Body/f_code_c.htm")
    ("coerce" . "Body/f_coerce.htm")
    ("compile" . "Body/f_cmp.htm")
    ("compile-file" . "Body/f_cmp_fi.htm")
    ("compile-file-pathname" . "Body/f_cmp__1.htm")
    ("compiled-function-p" . "Body/f_cmpd_f.htm")
    ("compiler-macro" . "Body/f_docume.htm")
    ("compiler-macro-function" . "Body/f_cmp_ma.htm")
    ("complement" . "Body/f_comple.htm")
    ("complexp" . "Body/f_comp_3.htm")
    ("compute-applicable-methods" . "Body/f_comput.htm")
    ("compute-restarts" . "Body/f_comp_1.htm")
    ("concatenate" . "Body/f_concat.htm")
    ("concatenated-stream-streams" . "Body/f_conc_1.htm")
    ("conjugate" . "Body/f_conjug.htm")
    ("consp" . "Body/f_consp.htm")
    ("constantly" . "Body/f_cons_1.htm")
    ("constantp" . "Body/f_consta.htm")
    ("copy-alist" . "Body/f_cp_ali.htm")
    ("copy-list" . "Body/f_cp_lis.htm")
    ("copy-pprint-dispatch" . "Body/f_cp_ppr.htm")
    ("copy-readtable" . "Body/f_cp_rdt.htm")
    ("copy-seq" . "Body/f_cp_seq.htm")
    ("copy-structure" . "Body/f_cp_stu.htm")
    ("copy-symbol" . "Body/f_cp_sym.htm")
    ("copy-tree" . "Body/f_cp_tre.htm")
    ("cos" . "Body/f_sin_c.htm")
    ("cosh" . "Body/f_sinh_.htm")
    ("count" . "Body/f_countc.htm")
    ("count-if" . "Body/f_countc.htm")
    ("count-if-not" . "Body/f_countc.htm")
    ("decode-float" . "Body/f_dec_fl.htm")
    ("decode-universal-time" . "Body/f_dec_un.htm")
    ("delete" . "Body/f_rm_rm.htm")
    ("delete-duplicates" . "Body/f_rm_dup.htm")
    ("delete-file" . "Body/f_del_fi.htm")
    ("delete-if" . "Body/f_rm_rm.htm")
    ("delete-if-not" . "Body/f_rm_rm.htm")
    ("delete-package" . "Body/f_del_pk.htm")
    ("denominator" . "Body/f_numera.htm")
    ("deposit-field" . "Body/f_deposi.htm")
    ("describe" . "Body/f_descri.htm")
    ("describe-object" . "Body/f_desc_1.htm")
    ("digit-char" . "Body/f_digit_.htm")
    ("digit-char-p" . "Body/f_digi_1.htm")
    ("directory" . "Body/f_dir.htm")
    ("directory-namestring" . "Body/f_namest.htm")
    ("disassemble" . "Body/f_disass.htm")
    ("documentation" . "Body/f_docume.htm")
    ("dpb" . "Body/f_dpb.htm")
    ("dribble" . "Body/f_dribbl.htm")
    ("echo-stream-input-stream" . "Body/f_echo_s.htm")
    ("echo-stream-output-stream" . "Body/f_echo_s.htm")
    ("ed" . "Body/f_ed.htm")
    ("eighth" . "Body/f_firstc.htm")
    ("elt" . "Body/f_elt.htm")
    ("encode-universal-time" . "Body/f_encode.htm")
    ("endp" . "Body/f_endp.htm")
    ("enough-namestring" . "Body/f_namest.htm")
    ("ensure-directories-exist" . "Body/f_ensu_1.htm")
    ("ensure-generic-function" . "Body/f_ensure.htm")
    ("eq" . "Body/f_eq.htm")
    ("equal" . "Body/f_equal.htm")
    ("equalp" . "Body/f_equalp.htm")
    ("eval" . "Body/f_eval.htm")
    ("evenp" . "Body/f_evenpc.htm")
    ("every" . "Body/f_everyc.htm")
    ("exp" . "Body/f_exp_e.htm")
    ("export" . "Body/f_export.htm")
    ("expt" . "Body/f_exp_e.htm")
    ("fboundp" . "Body/f_fbound.htm")
    ("fceiling" . "Body/f_floorc.htm")
    ("fdefinition" . "Body/f_fdefin.htm")
    ("ffloor" . "Body/f_floorc.htm")
    ("fifth" . "Body/f_firstc.htm")
    ("file-author" . "Body/f_file_a.htm")
    ("file-error-pathname" . "Body/f_file_e.htm")
    ("file-length" . "Body/f_file_l.htm")
    ("file-namestring" . "Body/f_namest.htm")
    ("file-position" . "Body/f_file_p.htm")
    ("file-string-length" . "Body/f_file_s.htm")
    ("file-write-date" . "Body/f_file_w.htm")
    ("fill" . "Body/f_fill.htm")
    ("fill-pointer" . "Body/f_fill_p.htm")
    ("find" . "Body/f_find_.htm")
    ("find-all-symbols" . "Body/f_find_a.htm")
    ("find-class" . "Body/f_find_c.htm")
    ("find-if" . "Body/f_find_.htm")
    ("find-if-not" . "Body/f_find_.htm")
    ("find-method" . "Body/f_find_m.htm")
    ("find-package" . "Body/f_find_p.htm")
    ("find-restart" . "Body/f_find_r.htm")
    ("find-symbol" . "Body/f_find_s.htm")
    ("finish-output" . "Body/f_finish.htm")
    ("first" . "Body/f_firstc.htm")
    ("float-digits" . "Body/f_dec_fl.htm")
    ("float-precision" . "Body/f_dec_fl.htm")
    ("float-radix" . "Body/f_dec_fl.htm")
    ("float-sign" . "Body/f_dec_fl.htm")
    ("floatp" . "Body/f_floatp.htm")
    ("floor" . "Body/f_floorc.htm")
    ("fmakunbound" . "Body/f_fmakun.htm")
    ("force-output" . "Body/f_finish.htm")
    ("format" . "Body/f_format.htm")
    ("fourth" . "Body/f_firstc.htm")
    ("fresh-line" . "Body/f_terpri.htm")
    ("fround" . "Body/f_floorc.htm")
    ("ftruncate" . "Body/f_floorc.htm")
    ("funcall" . "Body/f_funcal.htm")
    ("function-keywords" . "Body/f_fn_kwd.htm")
    ("function-lambda-expression" . "Body/f_fn_lam.htm")
    ("functionp" . "Body/f_fnp.htm")
    ("gcd" . "Body/f_gcd.htm")
    ("gensym" . "Body/f_gensym.htm")
    ("gentemp" . "Body/f_gentem.htm")
    ("get" . "Body/f_get.htm")
    ("get-decoded-time" . "Body/f_get_un.htm")
    ("get-dispatch-macro-character" . "Body/f_set__1.htm")
    ("get-internal-real-time" . "Body/f_get_in.htm")
    ("get-internal-run-time" . "Body/f_get__1.htm")
    ("get-macro-character" . "Body/f_set_ma.htm")
    ("get-output-stream-string" . "Body/f_get_ou.htm")
    ("get-properties" . "Body/f_get_pr.htm")
    ("get-setf-expansion" . "Body/f_get_se.htm")
    ("get-universal-time" . "Body/f_get_un.htm")
    ("getf" . "Body/f_getf.htm")
    ("gethash" . "Body/f_gethas.htm")
    ("graphic-char-p" . "Body/f_graphi.htm")
    ("hash-table-count" . "Body/f_hash_1.htm")
    ("hash-table-p" . "Body/f_hash_t.htm")
    ("hash-table-rehash-size" . "Body/f_hash_2.htm")
    ("hash-table-rehash-threshold" . "Body/f_hash_3.htm")
    ("hash-table-size" . "Body/f_hash_4.htm")
    ("hash-table-test" . "Body/f_hash_5.htm")
    ("host-namestring" . "Body/f_namest.htm")
    ("identity" . "Body/f_identi.htm")
    ("imagpart" . "Body/f_realpa.htm")
    ("import" . "Body/f_import.htm")
    ("initialize-instance" . "Body/f_init_i.htm")
    ("input-stream-p" . "Body/f_in_stm.htm")
    ("inspect" . "Body/f_inspec.htm")
    ("integer-decode-float" . "Body/f_dec_fl.htm")
    ("integer-length" . "Body/f_intege.htm")
    ("integerp" . "Body/f_inte_1.htm")
    ("interactive-stream-p" . "Body/f_intera.htm")
    ("intern" . "Body/f_intern.htm")
    ("intersection" . "Body/f_isec_.htm")
    ("invalid-method-error" . "Body/f_invali.htm")
    ("invoke-debugger" . "Body/f_invoke.htm")
    ("invoke-restart" . "Body/f_invo_1.htm")
    ("invoke-restart-interactively" . "Body/f_invo_2.htm")
    ("isqrt" . "Body/f_sqrt_.htm")
    ("keywordp" . "Body/f_kwdp.htm")
    ("last" . "Body/f_last.htm")
    ("lcm" . "Body/f_lcm.htm")
    ("ldb" . "Body/f_ldb.htm")
    ("ldb-test" . "Body/f_ldb_te.htm")
    ("ldiff" . "Body/f_ldiffc.htm")
    ("length" . "Body/f_length.htm")
    ("lisp-implementation-type" . "Body/f_lisp_i.htm")
    ("lisp-implementation-version" . "Body/f_lisp_i.htm")
    ("list*" . "Body/f_list_.htm")
    ("list-all-packages" . "Body/f_list_a.htm")
    ("list-length" . "Body/f_list_l.htm")
    ("listen" . "Body/f_listen.htm")
    ("listp" . "Body/f_listp.htm")
    ("load" . "Body/f_load.htm")
    ("load-logical-pathname-translations" . "Body/f_ld_log.htm")
    ("log" . "Body/f_log.htm")
    ("logand" . "Body/f_logand.htm")
    ("logandc1" . "Body/f_logand.htm")
    ("logandc2" . "Body/f_logand.htm")
    ("logbitp" . "Body/f_logbtp.htm")
    ("logcount" . "Body/f_logcou.htm")
    ("logeqv" . "Body/f_logand.htm")
    ("logical-pathname-translations" . "Body/f_logica.htm")
    ("logior" . "Body/f_logand.htm")
    ("lognand" . "Body/f_logand.htm")
    ("lognor" . "Body/f_logand.htm")
    ("lognot" . "Body/f_logand.htm")
    ("logorc1" . "Body/f_logand.htm")
    ("logorc2" . "Body/f_logand.htm")
    ("logtest" . "Body/f_logtes.htm")
    ("logxor" . "Body/f_logand.htm")
    ("long-site-name" . "Body/f_short_.htm")
    ("lower-case-p" . "Body/f_upper_.htm")
    ("machine-instance" . "Body/f_mach_i.htm")
    ("machine-type" . "Body/f_mach_t.htm")
    ("machine-version" . "Body/f_mach_v.htm")
    ("macro-function" . "Body/f_macro_.htm")
    ("macroexpand" . "Body/f_mexp_.htm")
    ("macroexpand-1" . "Body/f_mexp_.htm")
    ("make-array" . "Body/f_mk_ar.htm")
    ("make-broadcast-stream" . "Body/f_mk_bro.htm")
    ("make-concatenated-stream" . "Body/f_mk_con.htm")
    ("make-condition" . "Body/f_mk_cnd.htm")
    ("make-dispatch-macro-character" . "Body/f_mk_dis.htm")
    ("make-echo-stream" . "Body/f_mk_ech.htm")
    ("make-hash-table" . "Body/f_mk_has.htm")
    ("make-instance" . "Body/f_mk_ins.htm")
    ("make-instances-obsolete" . "Body/f_mk_i_1.htm")
    ("make-list" . "Body/f_mk_lis.htm")
    ("make-load-form" . "Body/f_mk_ld_.htm")
    ("make-load-form-saving-slots" . "Body/f_mk_l_1.htm")
    ("make-package" . "Body/f_mk_pkg.htm")
    ("make-pathname" . "Body/f_mk_pn.htm")
    ("make-random-state" . "Body/f_mk_rnd.htm")
    ("make-sequence" . "Body/f_mk_seq.htm")
    ("make-string" . "Body/f_mk_stg.htm")
    ("make-string-input-stream" . "Body/f_mk_s_1.htm")
    ("make-string-output-stream" . "Body/f_mk_s_2.htm")
    ("make-symbol" . "Body/f_mk_sym.htm")
    ("make-synonym-stream" . "Body/f_mk_syn.htm")
    ("make-two-way-stream" . "Body/f_mk_two.htm")
    ("makunbound" . "Body/f_makunb.htm")
    ("map" . "Body/f_map.htm")
    ("map-into" . "Body/f_map_in.htm")
    ("mapc" . "Body/f_mapc_.htm")
    ("mapcan" . "Body/f_mapc_.htm")
    ("mapcar" . "Body/f_mapc_.htm")
    ("mapcon" . "Body/f_mapc_.htm")
    ("maphash" . "Body/f_maphas.htm")
    ("mapl" . "Body/f_mapc_.htm")
    ("maplist" . "Body/f_mapc_.htm")
    ("mask-field" . "Body/f_mask_f.htm")
    ("max" . "Body/f_max_m.htm")
    ("member-if" . "Body/f_mem_m.htm")
    ("member-if-not" . "Body/f_mem_m.htm")
    ("merge" . "Body/f_merge.htm")
    ("merge-pathnames" . "Body/f_merge_.htm")
    ("method-combination-error" . "Body/f_meth_1.htm")
    ("method-qualifiers" . "Body/f_method.htm")
    ("min" . "Body/f_max_m.htm")
    ("minusp" . "Body/f_minusp.htm")
    ("mismatch" . "Body/f_mismat.htm")
    ("name-char" . "Body/f_name_c.htm")
    ("namestring" . "Body/f_namest.htm")
    ("nbutlast" . "Body/f_butlas.htm")
    ("nconc" . "Body/f_nconc.htm")
    ("next-method-p" . "Body/f_next_m.htm")
    ("nintersection" . "Body/f_isec_.htm")
    ("ninth" . "Body/f_firstc.htm")
    ("no-applicable-method" . "Body/f_no_app.htm")
    ("no-next-method" . "Body/f_no_nex.htm")
    ("notany" . "Body/f_everyc.htm")
    ("notevery" . "Body/f_everyc.htm")
    ("nreconc" . "Body/f_revapp.htm")
    ("nreverse" . "Body/f_revers.htm")
    ("nset-difference" . "Body/f_set_di.htm")
    ("nset-exclusive-or" . "Body/f_set_ex.htm")
    ("nstring-capitalize" . "Body/f_stg_up.htm")
    ("nstring-downcase" . "Body/f_stg_up.htm")
    ("nstring-upcase" . "Body/f_stg_up.htm")
    ("nsublis" . "Body/f_sublis.htm")
    ("nsubst" . "Body/f_substc.htm")
    ("nsubst-if" . "Body/f_substc.htm")
    ("nsubst-if-not" . "Body/f_substc.htm")
    ("nsubstitute" . "Body/f_sbs_s.htm")
    ("nsubstitute-if" . "Body/f_sbs_s.htm")
    ("nsubstitute-if-not" . "Body/f_sbs_s.htm")
    ("nth" . "Body/f_nth.htm")
    ("nthcdr" . "Body/f_nthcdr.htm")
    ("numberp" . "Body/f_nump.htm")
    ("numerator" . "Body/f_numera.htm")
    ("nunion" . "Body/f_unionc.htm")
    ("oddp" . "Body/f_evenpc.htm")
    ("open" . "Body/f_open.htm")
    ("open-stream-p" . "Body/f_open_s.htm")
    ("output-stream-p" . "Body/f_in_stm.htm")
    ("package-error-package" . "Body/f_pkg_er.htm")
    ("package-name" . "Body/f_pkg_na.htm")
    ("package-nicknames" . "Body/f_pkg_ni.htm")
    ("package-shadowing-symbols" . "Body/f_pkg_sh.htm")
    ("package-use-list" . "Body/f_pkg_us.htm")
    ("package-used-by-list" . "Body/f_pkg__1.htm")
    ("packagep" . "Body/f_pkgp.htm")
    ("pairlis" . "Body/f_pairli.htm")
    ("parse-integer" . "Body/f_parse_.htm")
    ("parse-namestring" . "Body/f_pars_1.htm")
    ("pathname-device" . "Body/f_pn_hos.htm")
    ("pathname-directory" . "Body/f_pn_hos.htm")
    ("pathname-host" . "Body/f_pn_hos.htm")
    ("pathname-match-p" . "Body/f_pn_mat.htm")
    ("pathname-name" . "Body/f_pn_hos.htm")
    ("pathname-type" . "Body/f_pn_hos.htm")
    ("pathname-version" . "Body/f_pn_hos.htm")
    ("pathnamep" . "Body/f_pnp.htm")
    ("peek-char" . "Body/f_peek_c.htm")
    ("phase" . "Body/f_phase.htm")
    ("plusp" . "Body/f_minusp.htm")
    ("position" . "Body/f_pos_p.htm")
    ("position-if" . "Body/f_pos_p.htm")
    ("position-if-not" . "Body/f_pos_p.htm")
    ("pprint" . "Body/f_wr_pr.htm")
    ("pprint-dispatch" . "Body/f_ppr_di.htm")
    ("pprint-fill" . "Body/f_ppr_fi.htm")
    ("pprint-indent" . "Body/f_ppr_in.htm")
    ("pprint-linear" . "Body/f_ppr_fi.htm")
    ("pprint-newline" . "Body/f_ppr_nl.htm")
    ("pprint-tab" . "Body/f_ppr_ta.htm")
    ("pprint-tabular" . "Body/f_ppr_fi.htm")
    ("prin1" . "Body/f_wr_pr.htm")
    ("prin1-to-string" . "Body/f_wr_to_.htm")
    ("princ" . "Body/f_wr_pr.htm")
    ("princ-to-string" . "Body/f_wr_to_.htm")
    ("print" . "Body/f_wr_pr.htm")
    ("print-not-readable-object" . "Body/f_pr_not.htm")
    ("print-object" . "Body/f_pr_obj.htm")
    ("probe-file" . "Body/f_probe_.htm")
    ("random" . "Body/f_random.htm")
    ("random-state-p" . "Body/f_rnd_st.htm")
    ("rassoc" . "Body/f_rassoc.htm")
    ("rassoc-if" . "Body/f_rassoc.htm")
    ("rassoc-if-not" . "Body/f_rassoc.htm")
    ("rationalize" . "Body/f_ration.htm")
    ("rationalp" . "Body/f_rati_1.htm")
    ("read" . "Body/f_rd_rd.htm")
    ("read-byte" . "Body/f_rd_by.htm")
    ("read-char" . "Body/f_rd_cha.htm")
    ("read-char-no-hang" . "Body/f_rd_c_1.htm")
    ("read-delimited-list" . "Body/f_rd_del.htm")
    ("read-from-string" . "Body/f_rd_fro.htm")
    ("read-line" . "Body/f_rd_lin.htm")
    ("read-preserving-whitespace" . "Body/f_rd_rd.htm")
    ("read-sequence" . "Body/f_rd_seq.htm")
    ("readtable-case" . "Body/f_rdtabl.htm")
    ("readtablep" . "Body/f_rdta_1.htm")
    ("realp" . "Body/f_realp.htm")
    ("realpart" . "Body/f_realpa.htm")
    ("reduce" . "Body/f_reduce.htm")
    ("reinitialize-instance" . "Body/f_reinit.htm")
    ("rem" . "Body/f_mod_r.htm")
    ("remhash" . "Body/f_remhas.htm")
    ("remove" . "Body/f_rm_rm.htm")
    ("remove-duplicates" . "Body/f_rm_dup.htm")
    ("remove-if" . "Body/f_rm_rm.htm")
    ("remove-if-not" . "Body/f_rm_rm.htm")
    ("remove-method" . "Body/f_rm_met.htm")
    ("remprop" . "Body/f_rempro.htm")
    ("rename-file" . "Body/f_rn_fil.htm")
    ("rename-package" . "Body/f_rn_pkg.htm")
    ("replace" . "Body/f_replac.htm")
    ("rest" . "Body/f_rest.htm")
    ("restart-name" . "Body/f_rst_na.htm")
    ("revappend" . "Body/f_revapp.htm")
    ("reverse" . "Body/f_revers.htm")
    ("room" . "Body/f_room.htm")
    ("round" . "Body/f_floorc.htm")
    ("row-major-aref" . "Body/f_row_ma.htm")
    ("rplaca" . "Body/f_rplaca.htm")
    ("rplacd" . "Body/f_rplaca.htm")
    ("sbit" . "Body/f_bt_sb.htm")
    ("scale-float" . "Body/f_dec_fl.htm")
    ("schar" . "Body/f_char_.htm")
    ("search" . "Body/f_search.htm")
    ("second" . "Body/f_firstc.htm")
    ("set" . "Body/f_set.htm")
    ("set-difference" . "Body/f_set_di.htm")
    ("set-dispatch-macro-character" . "Body/f_set__1.htm")
    ("set-exclusive-or" . "Body/f_set_ex.htm")
    ("set-macro-character" . "Body/f_set_ma.htm")
    ("set-pprint-dispatch" . "Body/f_set_pp.htm")
    ("set-syntax-from-char" . "Body/f_set_sy.htm")
    ("seventh" . "Body/f_firstc.htm")
    ("shadow" . "Body/f_shadow.htm")
    ("shadowing-import" . "Body/f_shdw_i.htm")
    ("shared-initialize" . "Body/f_shared.htm")
    ("short-site-name" . "Body/f_short_.htm")
    ("signum" . "Body/f_signum.htm")
    ("simple-bit-vector-p" . "Body/f_smp_bt.htm")
    ("simple-condition-format-arguments" . "Body/f_smp_cn.htm")
    ("simple-condition-format-control" . "Body/f_smp_cn.htm")
    ("simple-string-p" . "Body/f_smp_st.htm")
    ("simple-vector-p" . "Body/f_smp_ve.htm")
    ("sin" . "Body/f_sin_c.htm")
    ("sinh" . "Body/f_sinh_.htm")
    ("sixth" . "Body/f_firstc.htm")
    ("sleep" . "Body/f_sleep.htm")
    ("slot-boundp" . "Body/f_slt_bo.htm")
    ("slot-exists-p" . "Body/f_slt_ex.htm")
    ("slot-makunbound" . "Body/f_slt_ma.htm")
    ("slot-missing" . "Body/f_slt_mi.htm")
    ("slot-unbound" . "Body/f_slt_un.htm")
    ("slot-value" . "Body/f_slt_va.htm")
    ("software-type" . "Body/f_sw_tpc.htm")
    ("software-version" . "Body/f_sw_tpc.htm")
    ("some" . "Body/f_everyc.htm")
    ("sort" . "Body/f_sort_.htm")
    ("special-operator-p" . "Body/f_specia.htm")
    ("sqrt" . "Body/f_sqrt_.htm")
    ("stable-sort" . "Body/f_sort_.htm")
    ("standard-char-p" . "Body/f_std_ch.htm")
    ("stream-element-type" . "Body/f_stm_el.htm")
    ("stream-error-stream" . "Body/f_stm_er.htm")
    ("stream-external-format" . "Body/f_stm_ex.htm")
    ("streamp" . "Body/f_stmp.htm")
    ("string-capitalize" . "Body/f_stg_up.htm")
    ("string-downcase" . "Body/f_stg_up.htm")
    ("string-equal" . "Body/f_stgeq_.htm")
    ("string-greaterp" . "Body/f_stgeq_.htm")
    ("string-left-trim" . "Body/f_stg_tr.htm")
    ("string-lessp" . "Body/f_stgeq_.htm")
    ("string-not-equal" . "Body/f_stgeq_.htm")
    ("string-not-greaterp" . "Body/f_stgeq_.htm")
    ("string-not-lessp" . "Body/f_stgeq_.htm")
    ("string-right-trim" . "Body/f_stg_tr.htm")
    ("string-trim" . "Body/f_stg_tr.htm")
    ("string-upcase" . "Body/f_stg_up.htm")
    ("string/=" . "Body/f_stgeq_.htm")
    ("string<" . "Body/f_stgeq_.htm")
    ("string<=" . "Body/f_stgeq_.htm")
    ("string=" . "Body/f_stgeq_.htm")
    ("string>" . "Body/f_stgeq_.htm")
    ("string>=" . "Body/f_stgeq_.htm")
    ("stringp" . "Body/f_stgp.htm")
    ("structure" . "Body/f_docume.htm")
    ("sublis" . "Body/f_sublis.htm")
    ("subseq" . "Body/f_subseq.htm")
    ("subsetp" . "Body/f_subset.htm")
    ("subst" . "Body/f_substc.htm")
    ("subst-if" . "Body/f_substc.htm")
    ("subst-if-not" . "Body/f_substc.htm")
    ("substitute" . "Body/f_sbs_s.htm")
    ("substitute-if" . "Body/f_sbs_s.htm")
    ("substitute-if-not" . "Body/f_sbs_s.htm")
    ("subtypep" . "Body/f_subtpp.htm")
    ("svref" . "Body/f_svref.htm")
    ("sxhash" . "Body/f_sxhash.htm")
    ("symbol-function" . "Body/f_symb_1.htm")
    ("symbol-name" . "Body/f_symb_2.htm")
    ("symbol-package" . "Body/f_symb_3.htm")
    ("symbol-plist" . "Body/f_symb_4.htm")
    ("symbol-value" . "Body/f_symb_5.htm")
    ("symbolp" . "Body/f_symbol.htm")
    ("synonym-stream-symbol" . "Body/f_syn_st.htm")
    ("tailp" . "Body/f_ldiffc.htm")
    ("tan" . "Body/f_sin_c.htm")
    ("tanh" . "Body/f_sinh_.htm")
    ("tenth" . "Body/f_firstc.htm")
    ("terpri" . "Body/f_terpri.htm")
    ("third" . "Body/f_firstc.htm")
    ("translate-logical-pathname" . "Body/f_tr_log.htm")
    ("translate-pathname" . "Body/f_tr_pn.htm")
    ("tree-equal" . "Body/f_tree_e.htm")
    ("truename" . "Body/f_tn.htm")
    ("truncate" . "Body/f_floorc.htm")
    ("two-way-stream-input-stream" . "Body/f_two_wa.htm")
    ("two-way-stream-output-stream" . "Body/f_two_wa.htm")
    ("type-error-datum" . "Body/f_tp_err.htm")
    ("type-error-expected-type" . "Body/f_tp_err.htm")
    ("type-of" . "Body/f_tp_of.htm")
    ("typep" . "Body/f_typep.htm")
    ("unbound-slot-instance" . "Body/f_unboun.htm")
    ("unexport" . "Body/f_unexpo.htm")
    ("unintern" . "Body/f_uninte.htm")
    ("union" . "Body/f_unionc.htm")
    ("unread-char" . "Body/f_unrd_c.htm")
    ("unuse-package" . "Body/f_unuse_.htm")
    ("update-instance-for-different-class" . "Body/f_update.htm")
    ("update-instance-for-redefined-class" . "Body/f_upda_1.htm")
    ("upgraded-array-element-type" . "Body/f_upgr_1.htm")
    ("upgraded-complex-part-type" . "Body/f_upgrad.htm")
    ("upper-case-p" . "Body/f_upper_.htm")
    ("use-package" . "Body/f_use_pk.htm")
    ("user-homedir-pathname" . "Body/f_user_h.htm")
    ("values-list" . "Body/f_vals_l.htm")
    ("variable" . "Body/f_docume.htm")
    ("vector-pop" . "Body/f_vec_po.htm")
    ("vector-push" . "Body/f_vec_ps.htm")
    ("vector-push-extend" . "Body/f_vec_ps.htm")
    ("vectorp" . "Body/f_vecp.htm")
    ("wild-pathname-p" . "Body/f_wild_p.htm")
    ("write" . "Body/f_wr_pr.htm")
    ("write-byte" . "Body/f_wr_by.htm")
    ("write-char" . "Body/f_wr_cha.htm")
    ("write-line" . "Body/f_wr_stg.htm")
    ("write-sequence" . "Body/f_wr_seq.htm")
    ("write-string" . "Body/f_wr_stg.htm")
    ("write-to-string" . "Body/f_wr_to_.htm")
    ("y-or-n-p" . "Body/f_y_or_n.htm")
    ("yes-or-no-p" . "Body/f_y_or_n.htm")
    ("zerop" . "Body/f_zerop.htm"))
  "Common Lisp functions.")

;;;}}}
;;; ==================================================================

;;; ==================================================================
;;;}}} Macros:

(defvar *clhs-macros*
  '(("call-method" . "Body/m_call_m.htm")
    ("decf" . "Body/m_incf_.htm")
    ("do-all-symbols" . "Body/m_do_sym.htm")
    ("do-external-symbols" . "Body/m_do_sym.htm")
    ("do-symbols" . "Body/m_do_sym.htm")
    ("formatter" . "Body/m_format.htm")
    ("incf" . "Body/m_incf_.htm")
    ("loop-finish" . "Body/m_loop_f.htm")
    ("make-method" . "Body/m_call_m.htm")
    ("multiple-value-list" . "Body/m_mult_1.htm")
    ("multiple-value-setq" . "Body/m_mult_2.htm")
    ("nth-value" . "Body/m_nth_va.htm")
    ("otherwise" . "Body/m_case_.htm")
    ("pop" . "Body/m_pop.htm")
    ("pprint-exit-if-list-exhausted" . "Body/m_ppr_ex.htm")
    ("pprint-logical-block" . "Body/m_ppr_lo.htm")
    ("pprint-pop" . "Body/m_ppr_po.htm")
    ("print-unreadable-object" . "Body/m_pr_unr.htm")
    ("psetf" . "Body/m_setf_.htm")
    ("psetq" . "Body/m_psetq.htm")
    ("push" . "Body/m_push.htm")
    ("pushnew" . "Body/m_pshnew.htm")
    ("remf" . "Body/m_remf.htm")
    ("rotatef" . "Body/m_rotate.htm")
    ("shiftf" . "Body/m_shiftf.htm")
    ("step" . "Body/m_step.htm")
    ("time" . "Body/m_time.htm")
    ("trace" . "Body/m_tracec.htm")
    ("typecase" . "Body/m_tpcase.htm")
    ("unless" . "Body/m_when_.htm")
    ("untrace" . "Body/m_tracec.htm"))
  "Common Lisp macros.")

;;;}}}
;;; ==================================================================

;;; ==================================================================
;;;}}} Types:

(defvar *clhs-types*
  '(("array" . "Body/t_array.htm")
    ("base-char" . "Body/t_base_c.htm")
    ("base-string" . "Body/t_base_s.htm")
    ("bignum" . "Body/t_bignum.htm")
    ("bit-vector" . "Body/t_bt_vec.htm")
    ("boolean" . "Body/t_ban.htm")
    ("broadcast-stream" . "Body/t_broadc.htm")
    ("built-in-class" . "Body/t_built_.htm")
    ("class" . "Body/t_class.htm")
    ("compiled-function" . "Body/t_cmpd_f.htm")
    ("concatenated-stream" . "Body/t_concat.htm")
    ("double-float" . "Body/t_short_.htm")
    ("echo-stream" . "Body/t_echo_s.htm")
    ("extended-char" . "Body/t_extend.htm")
    ("file-stream" . "Body/t_file_s.htm")
    ("fixnum" . "Body/t_fixnum.htm")
    ("generic-function" . "Body/t_generi.htm")
    ("hash-table" . "Body/t_hash_t.htm")
    ("integer" . "Body/t_intege.htm")
    ("keyword" . "Body/t_kwd.htm")
    ("long-float" . "Body/t_short_.htm")
    ("method" . "Body/t_method.htm")
    ("number" . "Body/t_number.htm")
    ("package" . "Body/t_pkg.htm")
    ("random-state" . "Body/t_rnd_st.htm")
    ("ratio" . "Body/t_ratio.htm")
    ("readtable" . "Body/t_rdtabl.htm")
    ("real" . "Body/t_real.htm")
    ("restart" . "Body/t_rst.htm")
    ("satisfies" . "Body/t_satisf.htm")
    ("sequence" . "Body/t_seq.htm")
    ("short-float" . "Body/t_short_.htm")
    ("signed-byte" . "Body/t_sgn_by.htm")
    ("simple-array" . "Body/t_smp_ar.htm")
    ("simple-base-string" . "Body/t_smp_ba.htm")
    ("simple-bit-vector" . "Body/t_smp_bt.htm")
    ("simple-string" . "Body/t_smp_st.htm")
    ("simple-vector" . "Body/t_smp_ve.htm")
    ("single-float" . "Body/t_short_.htm")
    ("standard-char" . "Body/t_std_ch.htm")
    ("standard-class" . "Body/t_std_cl.htm")
    ("standard-generic-function" . "Body/t_std_ge.htm")
    ("standard-method" . "Body/t_std_me.htm")
    ("standard-object" . "Body/t_std_ob.htm")
    ("stream" . "Body/t_stream.htm")
    ("string-stream" . "Body/t_stg_st.htm")
    ("structure-class" . "Body/t_stu_cl.htm")
    ("structure-object" . "Body/t_stu_ob.htm")
    ("symbol" . "Body/t_symbol.htm")
    ("synonym-stream" . "Body/t_syn_st.htm")
    ("two-way-stream" . "Body/t_two_wa.htm")
    ("unsigned-byte" . "Body/t_unsgn_.htm"))
  "Common Lisp types.")

;;;}}}
;;; ==================================================================

;;; ==================================================================
;;;}}} Conditions:

(defvar *clhs-conditions*
  '(("arithmetic-error" . "Body/e_arithm.htm")
    ("cell-error" . "Body/e_cell_e.htm")
    ("condition" . "Body/e_cnd.htm")
    ("control-error" . "Body/e_contro.htm")
    ("division-by-zero" . "Body/e_divisi.htm")
    ("end-of-file" . "Body/e_end_of.htm")
    ("file-error" . "Body/e_file_e.htm")
    ("floating-point-inexact" . "Body/e_floa_1.htm")
    ("floating-point-invalid-operation" . "Body/e_floati.htm")
    ("floating-point-overflow" . "Body/e_floa_2.htm")
    ("floating-point-underflow" . "Body/e_floa_3.htm")
    ("package-error" . "Body/e_pkg_er.htm")
    ("parse-error" . "Body/e_parse_.htm")
    ("print-not-readable" . "Body/e_pr_not.htm")
    ("program-error" . "Body/e_progra.htm")
    ("reader-error" . "Body/e_rder_e.htm")
    ("serious-condition" . "Body/e_seriou.htm")
    ("simple-condition" . "Body/e_smp_cn.htm")
    ("simple-error" . "Body/e_smp_er.htm")
    ("simple-type-error" . "Body/e_smp_tp.htm")
    ("simple-warning" . "Body/e_smp_wa.htm")
    ("storage-condition" . "Body/e_storag.htm")
    ("stream-error" . "Body/e_stm_er.htm")
    ("style-warning" . "Body/e_style_.htm")
    ("type-error" . "Body/e_tp_err.htm")
    ("unbound-slot" . "Body/e_unboun.htm")
    ("unbound-variable" . "Body/e_unbo_1.htm")
    ("undefined-function" . "Body/e_undefi.htm")
    ("warning" . "Body/e_warnin.htm"))
  "Common Lisp conditions.")

;;;}}}
;;; ==================================================================

;;; ==================================================================
;;;}}} Special operators:

(defvar *clhs-special-operators*
  '(("load-time-value" . "Body/s_ld_tim.htm")
    ("multiple-value-call" . "Body/s_multip.htm")
    ("quote" . "Body/s_quote.htm")
    ("setq" . "Body/s_setq.htm"))
  "Common Lisp special operators.")

;;;}}}
;;; ==================================================================

;;; ==================================================================
;;;}}} Declarations:

(defvar *clhs-declarations*
  '(("compilation-speed" . "Body/d_optimi.htm")
    ("debug" . "Body/d_optimi.htm")
    ("declaration" . "Body/d_declar.htm")
    ("dynamic-extent" . "Body/d_dynami.htm")
    ("ftype" . "Body/d_ftype.htm")
    ("ignorable" . "Body/d_ignore.htm")
    ("ignore" . "Body/d_ignore.htm")
    ("inline" . "Body/d_inline.htm")
    ("notinline" . "Body/d_inline.htm")
    ("optimize" . "Body/d_optimi.htm")
    ("safety" . "Body/d_optimi.htm")
    ("space" . "Body/d_optimi.htm")
    ("special" . "Body/d_specia.htm")
    ("speed" . "Body/d_optimi.htm"))
  "Common Lisp declarations.")

;;;}}}
;;; ==================================================================

;;; These are the symbols that already have font-lock faces supplied
;;; by the major mode.
(make-symbol-lookup-data
 lisp-mode
 *clhs-base-uri*
 (*clhs-no-font-lock*
  *clhs-no-font-lock-table*))

;;; These are the symbols that require font-lock faces.
(make-symbol-lookup-data-with-font-lock
 lisp-mode
 *clhs-base-uri*
 ;;
 ;; Keywords use the `keyword-face' font-lock face.
 (*clhs-lambda-list-keywords*
  *clhs-lambda-list-keywords-table*
  font-lock-keyword-face)
 ;;
 ;; Variables use the `variable-name-face' font-lock face.
 (*clhs-variables*
  *clhs-variables-table*
  font-lock-variable-name-face)
 ;;
 ;; Ambiguous symbols use the `builtin-face' font-lock face.
 (*clhs-ambiguous-symbols*
  *clhs-ambiguous-symbols-table*
  font-lock-builtin-face)
 ;;
 ;; Functions use the `builtin-face' font-lock face.
 (*clhs-functions*
  *clhs-functions-table*
  font-lock-builtin-face)
 ;;
 ;; Macros use the `keyword-face' font-lock face.
 (*clhs-macros*
  *clhs-macros-table*
  font-lock-keyword-face)
 ;;
 ;; Types use the `type-face' font-lock face.
 (*clhs-types*
  *clhs-types-table*
  font-lock-type-face)
 ;;
 ;; Conditions use the `builtin-face' font-lock face.
 (*clhs-conditions*
  *clhs-conditions-table*
  font-lock-builtin-face)
 ;;
 ;; Special operators use the `builtin-face' font-lock face.
 (*clhs-special-operators*
  *clhs-special-operators-table*
  font-lock-builtin-face)
 ;;
 ;; Declarations use the `emacs-command-face' defined in the Emacs
 ;; Lisp symbols file.
 (*clhs-declarations*
  *clhs-declarations-table*
  custom-font-lock-emacs-command-face))

;;; htmlize-symbols-common-lisp.el ends here
