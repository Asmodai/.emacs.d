;;; -*- lisp-data -*-

;;; ------------------------------------------------------------------
;;; Available everywhere:

fundamental-mode

(today (format-time-string "%Y-%m-%d")
       :ann "Today's date"
       :doc "Insert today's date")

;;; ------------------------------------------------------------------
;;; Programming modes:

prog-mode

(fixme
 (if (derived-mode-p 'emacs-lisp-mode)
     ";; "
   comment-start)
 "FIXME ")

(todo
 (if (derived-mode-p 'emacs-lisp-mode)
     ";; "
   comment-start)
 "TODO ")

(bug
 (if (derived-mode-p 'emacs-lisp-mode)
     ";; "
   comment-start)
 "BUG ")

(hack
 (if (derived-mode-p 'emacs-lisp-mode)
     ";; "
   comment-start)
 "HACK ")

(xxx
 (if (derived-mode-p 'emacs-lisp-mode)
     ";; "
   comment-start)
 "XXX ")

;;; ------------------------------------------------------------------
;;; Lisp mode:

lisp-mode emacs-lisp-mode

(lambda  "(lambda (" p ")" n> r> ")")
(var     "(defvar " p "\n  \"" p "\")")
(const   "(defconst " p "\n  \"" p "\")")
(macro   "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(fun     "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(cond    "(cond" n "(" q "))" >)
(let     "(let (" p ")" n> r> ")")
(lett    "(let* (" p ")" n> r> ")")
(dotimes "(dotimes (" p ")" n> r> ")")
(dolist  "(dolist (" p ")" n> r> ")")

;;; ------------------------------------------------------------------
;;; Emacs Lisp mode:

emacs-lisp-mode

(autoload  ";;;###autoload")
(pt        "(point")
(local     "(defvar-local " p "\n  \"" p "\")")
(custom    "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(face      "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(group     "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \""
           p "-\")")
(alias     "(defalias '" p " '" p ")")
(iflet     "(if-let (" p ")" n> r> ")")
(whenlet   "(when-let (" p ")" n> r> ")")
(whilelet  "(while-let (" p ")" n> r> ")")
(andlet    "(and-let* (" p ")" n> r> ")")
(pcase     "(pcase " (p "scrutinee") n "(" q "))" >)
(pcaselet  "(pcase-let (" p ")" n> r> ")")
(pcaselett "(pcase-let* (" p ")" n> r> ")")
(rec       "(letrec (" p ")" n> r> ")")
(loop      "(cl-loop for " p " in " p " do" n> r> ")")
(command   "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive" p ")" n> r>
           ")")
(package   (i header) r n n (i provide))
(advice    "(defun " (p "adv" name) " (&rest app)" n> p n> "(apply app))" n>
           "(advice-add #'" (p "fun") " " (p ":around") " #'" (s name) ")")
(provide   "(provide '" (file-name-base (or (buffer-file-name) (buffer-name)))
           ")" n)

;;; ------------------------------------------------------------------
;;; Emacs Shell mode:

eshell-mode

(for   "for " (p "i") " in " p " { " q " }")
(while "while { " p " } { " q " }")
(until "until { " p " } { " q " }")
(if    "if { " p " } { " q " }")
(ife   "if { " p " } { " p " } { " q " }")
(unl   "unless { " p " } { " q " }")
(unle  "unless { " p " } { " p " } { " q " }")

;;; ------------------------------------------------------------------
;;; Text mode:

text-mode

(box "┌─" (make-string (length str) ?─) "─┐" n
     "│ " (s str)                       " │" n
     "└─" (make-string (length str) ?─) "─┘" n :doc "UNICODE BOX")
(abox "+-" (make-string (length str) ?-) "-+" n
      "| " (s str)                       " |" n
      "+-" (make-string (length str) ?-) "-+" n :doc "ASCII BOX")
(cut "--8<---------------cut here---------------start------------->8---" n r n
     "--8<---------------cut here---------------end--------------->8---" n)
(rot13 (p "plain text" text) n "----" n (rot13 text))
(calc (p "taylor(sin(x),x=0,3)" formula) n "----" n (format "%s" (calc-eval formula)))
(table (p (read-number "Rows: ") rows noinsert)
       (p (read-number "Cols: ") cols noinsert)
       "| " (p "  ") (* (1- cols) " | " (p "  ")) " |" n
       "|" (* cols "----|") n
       (* rows "| " (p "  ") (* (1- cols) " | " (p "  ")) " |" n))

;;; ------------------------------------------------------------------
;;; Org mode:

(caption    "#+caption: ")
(drawer     ":" p ":" n r ":end:")
(begin      "#+begin_" (s name) n> r> n "#+end_" name)
(quote      "#+begin_quote" n> r> n "#+end_quote")
(sidenote   "#+begin_sidenote" n> r> n "#+end_sidenote")
(marginnote "#+begin_marginnote" n> r> n "#+end_marginnote")
(example    "#+begin_example" n> r> n "#+end_example")
(center     "#+begin_center" n> r> n "#+end_center")
(ascii      "#+begin_export ascii" n> r> n "#+end_export")
(html       "#+begin_export html" n> r> n "#+end_export")
(latex      "#+begin_export latex" n> r> n "#+end_export")
(comment    "#+begin_comment" n> r> n "#+end_comment")
(verse      "#+begin_verse" n> r> n "#+end_verse")
(src        "#+begin_src " q n r n "#+end_src")
(gnuplot    "#+begin_src gnuplot :var data=" (p "table") " :file "
            (p "plot.png") n r n "#+end_src" :post (org-edit-src-code))
(elisp      "#+begin_src emacs-lisp" n r n "#+end_src" :post (org-edit-src-code))
(go         "#+begin_src go" n r n "#+end_src" : post (org-edit-src-code))
(inlsrc     "src_" p "{" q "}")
(title      "#+title: " p n "#+author: Daniel Mendler" n "#+language: en")

;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "[a-z]"
;; End:
