@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995, 1998, 1999, 2000, 2001
@c   Free Software Foundation, Inc. 
@c See the file elisp.texi for copying conditions.
@setfilename ../info/display
@node Display, Calendar, Processes, Top
@chapter Emacs Display

  This chapter describes a number of features related to the display
that Emacs presents to the user.

@menu
* Refresh Screen::      Clearing the screen and redrawing everything on it.
* Forcing Redisplay::   Forcing redisplay.
* Truncation::          Folding or wrapping long text lines.
* The Echo Area::       Where messages are displayed.
* Invisible Text::      Hiding part of the buffer text.
* Selective Display::   Hiding part of the buffer text (the old way).
* Overlay Arrow::       Display of an arrow to indicate position.
* Temporary Displays::  Displays that go away automatically.
* Overlays::		Use overlays to highlight parts of the buffer.
* Width::               How wide a character or string is on the screen.
* Faces::		A face defines a graphics style for text characters:
                          font, colors, etc.
* Display Property::    Enabling special display features.
* Images::              Displaying images in Emacs buffers.
* Blinking::            How Emacs shows the matching open parenthesis.
* Inverse Video::	Specifying how the screen looks.
* Usual Display::	The usual conventions for displaying nonprinting chars.
* Display Tables::	How to specify other conventions.
* Beeping::             Audible signal to the user.
* Window Systems::      Which window system is being used.
@end menu

@node Refresh Screen
@section Refreshing the Screen

The function @code{redraw-frame} redisplays the entire contents of a
given frame (@pxref{Frames}).

@c Emacs 19 feature
@defun redraw-frame frame
This function clears and redisplays frame @var{frame}.
@end defun

Even more powerful is @code{redraw-display}:

@deffn Command redraw-display
This function clears and redisplays all visible frames.
@end deffn

  Processing user input takes absolute priority over redisplay.  If you
call these functions when input is available, they do nothing
immediately, but a full redisplay does happen eventually---after all the
input has been processed.

  Normally, suspending and resuming Emacs also refreshes the screen.
Some terminal emulators record separate contents for display-oriented
programs such as Emacs and for ordinary sequential display.  If you are
using such a terminal, you might want to inhibit the redisplay on
resumption.

@defvar no-redraw-on-reenter
@cindex suspend (cf. @code{no-redraw-on-reenter})
@cindex resume (cf. @code{no-redraw-on-reenter})
This variable controls whether Emacs redraws the entire screen after it
has been suspended and resumed.  Non-@code{nil} means there is no need
to redraw, @code{nil} means redrawing is needed.  The default is @code{nil}.
@end defvar

@node Forcing Redisplay
@section Forcing Redisplay
@cindex forcing redisplay

  Emacs redisplay normally stops if input arrives, and does not happen
at all if input is available before it starts.  Most of the time, this
is exactly what you want.  However, you can prevent preemption by
binding @code{redisplay-dont-pause} to a non-@code{nil} value.

@tindex redisplay-dont-pause
@defvar redisplay-dont-pause
If this variable is non-@code{nil}, pending input does not
prevent or halt redisplay; redisplay occurs, and finishes,
regardless of whether input is available.  This feature is available
as of Emacs 21.
@end defvar

  You can request a display update, but only if no input is pending,
with @code{(sit-for 0)}.  To force a display update even when input is
pending, do this:

@example
(let ((redisplay-dont-pause t))
  (sit-for 0))
@end example

@node Truncation
@section Truncation
@cindex line wrapping
@cindex continuation lines
@cindex @samp{$} in display
@cindex @samp{\} in display

  When a line of text extends beyond the right edge of a window, the
line can either be continued on the next screen line, or truncated to
one screen line.  The additional screen lines used to display a long
text line are called @dfn{continuation} lines.  Normally, a @samp{$} in
the rightmost column of the window indicates truncation; a @samp{\} on
the rightmost column indicates a line that ``wraps'' onto the next line,
which is also called @dfn{continuing} the line.  (The display table can
specify alternative indicators; see @ref{Display Tables}.)

  Note that continuation is different from filling; continuation happens
on the screen only, not in the buffer contents, and it breaks a line
precisely at the right margin, not at a word boundary.  @xref{Filling}.

@defopt truncate-lines
This buffer-local variable controls how Emacs displays lines that extend
beyond the right edge of the window.  The default is @code{nil}, which
specifies continuation.  If the value is non-@code{nil}, then these
lines are truncated.

If the variable @code{truncate-partial-width-windows} is non-@code{nil},
then truncation is always used for side-by-side windows (within one
frame) regardless of the value of @code{truncate-lines}.
@end defopt

@defopt default-truncate-lines
This variable is the default value for @code{truncate-lines}, for
buffers that do not have buffer-local values for it.
@end defopt

@defopt truncate-partial-width-windows
This variable controls display of lines that extend beyond the right
edge of the window, in side-by-side windows (@pxref{Splitting Windows}).
If it is non-@code{nil}, these lines are truncated; otherwise,
@code{truncate-lines} says what to do with them.
@end defopt

  When horizontal scrolling (@pxref{Horizontal Scrolling}) is in use in
a window, that forces truncation.

  You can override the glyphs that indicate continuation or truncation
using the display table; see @ref{Display Tables}.

  If your buffer contains @emph{very} long lines, and you use
continuation to display them, just thinking about them can make Emacs
redisplay slow.  The column computation and indentation functions also
become slow.  Then you might find it advisable to set
@code{cache-long-line-scans} to @code{t}.

@defvar cache-long-line-scans
If this variable is non-@code{nil}, various indentation and motion
functions, and Emacs redisplay, cache the results of scanning the
buffer, and consult the cache to avoid rescanning regions of the buffer
unless they are modified.

Turning on the cache slows down processing of short lines somewhat.

This variable is automatically buffer-local in every buffer.
@end defvar

@node The Echo Area
@section The Echo Area
@cindex error display
@cindex echo area

The @dfn{echo area} is used for displaying messages made with the
@code{message} primitive, and for echoing keystrokes.  It is not the
same as the minibuffer, despite the fact that the minibuffer appears
(when active) in the same place on the screen as the echo area.  The
@cite{GNU Emacs Manual} specifies the rules for resolving conflicts
between the echo area and the minibuffer for use of that screen space
(@pxref{Minibuffer,, The Minibuffer, emacs, The GNU Emacs Manual}).
Error messages appear in the echo area; see @ref{Errors}.

You can write output in the echo area by using the Lisp printing
functions with @code{t} as the stream (@pxref{Output Functions}), or as
follows:

@defun message string &rest arguments
This function displays a message in the echo area.  The
argument @var{string} is similar to a C language @code{printf} control
string.  See @code{format} in @ref{String Conversion}, for the details
on the conversion specifications.  @code{message} returns the
constructed string.

In batch mode, @code{message} prints the message text on the standard
error stream, followed by a newline.

If @var{string}, or strings among the @var{arguments}, have @code{face}
text properties, these affect the way the message is displayed.

@c Emacs 19 feature
If @var{string} is @code{nil}, @code{message} clears the echo area; if
the echo area has been expanded automatically, this brings it back to
its normal size.  If the minibuffer is active, this brings the
minibuffer contents back onto the screen immediately.

@vindex message-truncate-lines
Normally, displaying a long message resizes the echo area to display
the entire message.  But if the variable @code{message-truncate-lines}
is non-@code{nil}, the echo area does not resize, and the message is
truncated to fit it, as in Emacs 20 and before.

@example
@group
(message "Minibuffer depth is %d."
         (minibuffer-depth))
 @print{} Minibuffer depth is 0.
@result{} "Minibuffer depth is 0."
@end group

@group
---------- Echo Area ----------
Minibuffer depth is 0.
---------- Echo Area ----------
@end group
@end example

To automatically display a message in the echo area or in a pop-buffer,
depending on its size, use @code{display-message-or-buffer}.
@end defun

@tindex with-temp-message
@defmac with-temp-message message &rest body
This construct displays a message in the echo area temporarily, during
the execution of @var{body}.  It displays @var{message}, executes
@var{body}, then returns the value of the last body form while restoring
the previous echo area contents.
@end defmac

@defun message-or-box string &rest arguments
This function displays a message like @code{message}, but may display it
in a dialog box instead of the echo area.  If this function is called in
a command that was invoked using the mouse---more precisely, if
@code{last-nonmenu-event} (@pxref{Command Loop Info}) is either
@code{nil} or a list---then it uses a dialog box or pop-up menu to
display the message.  Otherwise, it uses the echo area.  (This is the
same criterion that @code{y-or-n-p} uses to make a similar decision; see
@ref{Yes-or-No Queries}.)

You can force use of the mouse or of the echo area by binding
@code{last-nonmenu-event} to a suitable value around the call.
@end defun

@defun message-box string &rest arguments
This function displays a message like @code{message}, but uses a dialog
box (or a pop-up menu) whenever that is possible.  If it is impossible
to use a dialog box or pop-up menu, because the terminal does not
support them, then @code{message-box} uses the echo area, like
@code{message}.
@end defun

@defun display-message-or-buffer message &optional buffer-name not-this-window frame
@tindex display-message-or-buffer
This function displays the message @var{message}, which may be either a
string or a buffer.  If it is shorter than the maximum height of the
echo area, as defined by @code{max-mini-window-height}, it is displayed
in the echo area, using @code{message}.  Otherwise,
@code{display-buffer} is used to show it in a pop-up buffer.

Returns either the string shown in the echo area, or when a pop-up
buffer is used, the window used to display it.

If @var{message} is a string, then the optional argument
@var{buffer-name} is the name of the buffer used to display it when a
pop-up buffer is used, defaulting to @samp{*Message*}.  In the case
where @var{message} is a string and displayed in the echo area, it is
not specified whether the contents are inserted into the buffer anyway.

The optional arguments @var{not-this-window} and @var{frame} are as for
@code{display-buffer}, and only used if a buffer is displayed.
@end defun

@defun current-message
This function returns the message currently being displayed in the
echo area, or @code{nil} if there is none.
@end defun

@defvar cursor-in-echo-area
This variable controls where the cursor appears when a message is
displayed in the echo area.  If it is non-@code{nil}, then the cursor
appears at the end of the message.  Otherwise, the cursor appears at
point---not in the echo area at all.

The value is normally @code{nil}; Lisp programs bind it to @code{t}
for brief periods of time.
@end defvar

@defvar echo-area-clear-hook
This normal hook is run whenever the echo area is cleared---either by
@code{(message nil)} or for any other reason.
@end defvar

Almost all the messages displayed in the echo area are also recorded
in the @samp{*Messages*} buffer.

@defopt message-log-max
This variable specifies how many lines to keep in the @samp{*Messages*}
buffer.  The value @code{t} means there is no limit on how many lines to
keep.  The value @code{nil} disables message logging entirely.  Here's
how to display a message and prevent it from being logged:

@example
(let (message-log-max)
  (message @dots{}))
@end example
@end defopt

@defvar echo-keystrokes
This variable determines how much time should elapse before command
characters echo.  Its value must be an integer or floating point number,
which specifies the
number of seconds to wait before echoing.  If the user types a prefix
key (such as @kbd{C-x}) and then delays this many seconds before
continuing, the prefix key is echoed in the echo area.  (Once echoing
begins in a key sequence, all subsequent characters in the same key
sequence are echoed immediately.)

If the value is zero, then command input is not echoed.
@end defvar

@node Invisible Text
@section Invisible Text

@cindex invisible text
You can make characters @dfn{invisible}, so that they do not appear on
the screen, with the @code{invisible} property.  This can be either a
text property (@pxref{Text Properties}) or a property of an overlay
(@pxref{Overlays}).

In the simplest case, any non-@code{nil} @code{invisible} property makes
a character invisible.  This is the default case---if you don't alter
the default value of @code{buffer-invisibility-spec}, this is how the
@code{invisible} property works.

More generally, you can use the variable @code{buffer-invisibility-spec}
to control which values of the @code{invisible} property make text
invisible.  This permits you to classify the text into different subsets
in advance, by giving them different @code{invisible} values, and
subsequently make various subsets visible or invisible by changing the
value of @code{buffer-invisibility-spec}.

Controlling visibility with @code{buffer-invisibility-spec} is
especially useful in a program to display the list of entries in a
database.  It permits the implementation of convenient filtering
commands to view just a part of the entries in the database.  Setting
this variable is very fast, much faster than scanning all the text in
the buffer looking for properties to change.

@defvar buffer-invisibility-spec
This variable specifies which kinds of @code{invisible} properties
actually make a character invisible.

@table @asis
@item @code{t}
A character is invisible if its @code{invisible} property is
non-@code{nil}.  This is the default.

@item a list
Each element of the list specifies a criterion for invisibility; if a
character's @code{invisible} property fits any one of these criteria,
the character is invisible.  The list can have two kinds of elements:

@table @code
@item @var{atom}
A character is invisible if its @code{invisible} property value
is @var{atom} or if it is a list with @var{atom} as a member.

@item (@var{atom} . t)
A character is invisible if its @code{invisible} property value
is @var{atom} or if it is a list with @var{atom} as a member.
Moreover, if this character is at the end of a line and is followed
by a visible newline, it displays an ellipsis.
@end table
@end table
@end defvar

  Two functions are specifically provided for adding elements to
@code{buffer-invisibility-spec} and removing elements from it.

@defun add-to-invisibility-spec element
Add the element @var{element} to @code{buffer-invisibility-spec}
(if it is not already present in that list).
@end defun

@defun remove-from-invisibility-spec element
Remove the element @var{element} from @code{buffer-invisibility-spec}.
This does nothing if @var{element} is not in the list.
@end defun

  One convention about the use of @code{buffer-invisibility-spec} is
that a major mode should use the mode's own name as an element of
@code{buffer-invisibility-spec} and as the value of the @code{invisible}
property:

@example
;; @r{If you want to display an ellipsis:}
(add-to-invisibility-spec '(my-symbol . t)) 
;; @r{If you don't want ellipsis:}
(add-to-invisibility-spec 'my-symbol) 

(overlay-put (make-overlay beginning end)
             'invisible 'my-symbol)

;; @r{When done with the overlays:}
(remove-from-invisibility-spec '(my-symbol . t))
;; @r{Or respectively:}
(remove-from-invisibility-spec 'my-symbol)
@end example

@vindex line-move-ignore-invisible
  Ordinarily, commands that operate on text or move point do not care
whether the text is invisible.  The user-level line motion commands
explicitly ignore invisible newlines if
@code{line-move-ignore-invisible} is non-@code{nil}, but only because
they are explicitly programmed to do so.

  Incremental search can make invisible overlays visible temporarily
and/or permanently when a match includes invisible text.  To enable
this, the overlay should have a non-@code{nil}
@code{isearch-open-invisible} property.  The property value should be a
function to be called with the overlay as an argument.  This function
should make the overlay visible permanently; it is used when the match
overlaps the overlay on exit from the search.

  During the search, such overlays are made temporarily visible by
temporarily modifying their invisible and intangible properties.  If you
want this to be done differently for a certain overlay, give it an
@code{isearch-open-invisible-temporary} property which is a function.
The function is called with two arguments: the first is the overlay, and
the second is @code{nil} to make the overlay visible, or @code{t} to
make it invisible again.

@node Selective Display
@section Selective Display
@cindex selective display

  @dfn{Selective display} refers to a pair of related features for
hiding certain lines on the screen.

  The first variant, explicit selective display, is designed for use in
a Lisp program: it controls which lines are hidden by altering the text.
The invisible text feature (@pxref{Invisible Text}) has partially
replaced this feature.

  In the second variant, the choice of lines to hide is made
automatically based on indentation.  This variant is designed to be a
user-level feature.

  The way you control explicit selective display is by replacing a
newline (control-j) with a carriage return (control-m).  The text that
was formerly a line following that newline is now invisible.  Strictly
speaking, it is temporarily no longer a line at all, since only newlines
can separate lines; it is now part of the previous line.

  Selective display does not directly affect editing commands.  For
example, @kbd{C-f} (@code{forward-char}) moves point unhesitatingly into
invisible text.  However, the replacement of newline characters with
carriage return characters affects some editing commands.  For example,
@code{next-line} skips invisible lines, since it searches only for
newlines.  Modes that use selective display can also define commands
that take account of the newlines, or that make parts of the text
visible or invisible.

  When you write a selectively displayed buffer into a file, all the
control-m's are output as newlines.  This means that when you next read
in the file, it looks OK, with nothing invisible.  The selective display
effect is seen only within Emacs.

@defvar selective-display
This buffer-local variable enables selective display.  This means that
lines, or portions of lines, may be made invisible.  

@itemize @bullet
@item
If the value of @code{selective-display} is @code{t}, then the character
control-m marks the start of invisible text; the control-m, and the rest
of the line following it, are not displayed.  This is explicit selective
display.

@item
If the value of @code{selective-display} is a positive integer, then
lines that start with more than that many columns of indentation are not
displayed.
@end itemize

When some portion of a buffer is invisible, the vertical movement
commands operate as if that portion did not exist, allowing a single
@code{next-line} command to skip any number of invisible lines.
However, character movement commands (such as @code{forward-char}) do
not skip the invisible portion, and it is possible (if tricky) to insert
or delete text in an invisible portion.

In the examples below, we show the @emph{display appearance} of the
buffer @code{foo}, which changes with the value of
@code{selective-display}.  The @emph{contents} of the buffer do not
change.

@example
@group
(setq selective-display nil)
     @result{} nil

---------- Buffer: foo ----------
1 on this column
 2on this column
  3n this column
  3n this column
 2on this column
1 on this column
---------- Buffer: foo ----------
@end group

@group
(setq selective-display 2)
     @result{} 2

---------- Buffer: foo ----------
1 on this column
 2on this column
 2on this column
1 on this column
---------- Buffer: foo ----------
@end group
@end example
@end defvar

@defvar selective-display-ellipses
If this buffer-local variable is non-@code{nil}, then Emacs displays
@samp{@dots{}} at the end of a line that is followed by invisible text.
This example is a continuation of the previous one.

@example
@group
(setq selective-display-ellipses t)
     @result{} t

---------- Buffer: foo ----------
1 on this column
 2on this column ...
 2on this column
1 on this column
---------- Buffer: foo ----------
@end group
@end example

You can use a display table to substitute other text for the ellipsis
(@samp{@dots{}}).  @xref{Display Tables}.
@end defvar

@node Overlay Arrow
@section The Overlay Arrow
@cindex overlay arrow

  The @dfn{overlay arrow} is useful for directing the user's attention
to a particular line in a buffer.  For example, in the modes used for
interface to debuggers, the overlay arrow indicates the line of code
about to be executed.

@defvar overlay-arrow-string
This variable holds the string to display to call attention to a
particular line, or @code{nil} if the arrow feature is not in use.
On a graphical display the contents of the string are ignored; instead a
glyph is displayed in the fringe area to the left of the display area.
@end defvar

@defvar overlay-arrow-position
This variable holds a marker that indicates where to display the overlay
arrow.  It should point at the beginning of a line.  On a non-graphical
display the arrow text
appears at the beginning of that line, overlaying any text that would
otherwise appear.  Since the arrow is usually short, and the line
usually begins with indentation, normally nothing significant is
overwritten.

The overlay string is displayed only in the buffer that this marker
points into.  Thus, only one buffer can have an overlay arrow at any
given time.
@c !!! overlay-arrow-position: but the overlay string may remain in the display
@c of some other buffer until an update is required.  This should be fixed
@c now.  Is it?
@end defvar

  You can do a similar job by creating an overlay with a
@code{before-string} property.  @xref{Overlay Properties}.

@node Temporary Displays
@section Temporary Displays

  Temporary displays are used by Lisp programs to put output into a
buffer and then present it to the user for perusal rather than for
editing.  Many help commands use this feature.

@defspec with-output-to-temp-buffer buffer-name forms@dots{}
This function executes @var{forms} while arranging to insert any output
they print into the buffer named @var{buffer-name}, which is first
created if necessary, and put into Help mode.  Finally, the buffer is
displayed in some window, but not selected.

If the @var{forms} do not change the major mode in the output buffer, so
that it is still Help mode at the end of their execution, then
@code{with-output-to-temp-buffer} makes this buffer read-only at the
end, and also scans it for function and variable names to make them into
clickable cross-references.

The string @var{buffer-name} specifies the temporary buffer, which
need not already exist.  The argument must be a string, not a buffer.
The buffer is erased initially (with no questions asked), and it is
marked as unmodified after @code{with-output-to-temp-buffer} exits.

@code{with-output-to-temp-buffer} binds @code{standard-output} to the
temporary buffer, then it evaluates the forms in @var{forms}.  Output
using the Lisp output functions within @var{forms} goes by default to
that buffer (but screen display and messages in the echo area, although
they are ``output'' in the general sense of the word, are not affected).
@xref{Output Functions}.

Several hooks are available for customizing the behavior
of this construct; they are listed below.

The value of the last form in @var{forms} is returned.

@example
@group
---------- Buffer: foo ----------
 This is the contents of foo.
---------- Buffer: foo ----------
@end group

@group
(with-output-to-temp-buffer "foo"
    (print 20)
    (print standard-output))
@result{} #<buffer foo>

---------- Buffer: foo ----------
20

#<buffer foo>

---------- Buffer: foo ----------
@end group
@end example
@end defspec

@defvar temp-buffer-show-function
If this variable is non-@code{nil}, @code{with-output-to-temp-buffer}
calls it as a function to do the job of displaying a help buffer.  The
function gets one argument, which is the buffer it should display.

It is a good idea for this function to run @code{temp-buffer-show-hook}
just as @code{with-output-to-temp-buffer} normally would, inside of
@code{save-selected-window} and with the chosen window and buffer
selected.
@end defvar

@defvar temp-buffer-setup-hook
@tindex temp-buffer-setup-hook
This normal hook is run by @code{with-output-to-temp-buffer} before
evaluating @var{body}.  When the hook runs, the help buffer is current.
This hook is normally set up with a function to put the buffer in Help
mode.
@end defvar

@defvar temp-buffer-show-hook
This normal hook is run by @code{with-output-to-temp-buffer} after
displaying the help buffer.  When the hook runs, the help buffer is
current, and the window it was displayed in is selected.  This hook is
normally set up with a function to make the buffer read only, and find
function names and variable names in it, provided the major mode is
still Help mode.
@end defvar

@defun momentary-string-display string position &optional char message
This function momentarily displays @var{string} in the current buffer at
@var{position}.  It has no effect on the undo list or on the buffer's
modification status.

The momentary display remains until the next input event.  If the next
input event is @var{char}, @code{momentary-string-display} ignores it
and returns.  Otherwise, that event remains buffered for subsequent use
as input.  Thus, typing @var{char} will simply remove the string from
the display, while typing (say) @kbd{C-f} will remove the string from
the display and later (presumably) move point forward.  The argument
@var{char} is a space by default.

The return value of @code{momentary-string-display} is not meaningful.

If the string @var{string} does not contain control characters, you can
do the same job in a more general way by creating (and then subsequently
deleting) an overlay with a @code{before-string} property.
@xref{Overlay Properties}.

If @var{message} is non-@code{nil}, it is displayed in the echo area
while @var{string} is displayed in the buffer.  If it is @code{nil}, a
default message says to type @var{char} to continue.

In this example, point is initially located at the beginning of the
second line:

@example
@group
---------- Buffer: foo ----------
This is the contents of foo.
@point{}Second line.
---------- Buffer: foo ----------
@end group

@group
(momentary-string-display
  "**** Important Message! ****"
  (point) ?\r
  "Type RET when done reading")
@result{} t
@end group

@group
---------- Buffer: foo ----------
This is the contents of foo.
**** Important Message! ****Second line.
---------- Buffer: foo ----------

---------- Echo Area ----------
Type RET when done reading
---------- Echo Area ----------
@end group
@end example
@end defun

@node Overlays
@section Overlays
@cindex overlays

You can use @dfn{overlays} to alter the appearance of a buffer's text on
the screen, for the sake of presentation features.  An overlay is an
object that belongs to a particular buffer, and has a specified
beginning and end.  It also has properties that you can examine and set;
these affect the display of the text within the overlay.

@menu
* Overlay Properties::	How to read and set properties.
			What properties do to the screen display.
* Managing Overlays::   Creating and moving overlays.
* Finding Overlays::    Searching for overlays.
@end menu

@node Overlay Properties
@subsection Overlay Properties

  Overlay properties are like text properties in that the properties that
alter how a character is displayed can come from either source.  But in
most respects they are different.  Text properties are considered a part
of the text; overlays are specifically considered not to be part of the
text.  Thus, copying text between various buffers and strings preserves
text properties, but does not try to preserve overlays.  Changing a
buffer's text properties marks the buffer as modified, while moving an
overlay or changing its properties does not.  Unlike text property
changes, overlay changes are not recorded in the buffer's undo list.
@xref{Text Properties}, for comparison.

  These functions are used for reading and writing the properties of an
overlay:

@defun overlay-get overlay prop
This function returns the value of property @var{prop} recorded in
@var{overlay}, if any.  If @var{overlay} does not record any value for
that property, but it does have a @code{category} property which is a
symbol, that symbol's @var{prop} property is used.  Otherwise, the value
is @code{nil}.
@end defun

@defun overlay-put overlay prop value
This function sets the value of property @var{prop} recorded in
@var{overlay} to @var{value}.  It returns @var{value}.
@end defun

  See also the function @code{get-char-property} which checks both
overlay properties and text properties for a given character.
@xref{Examining Properties}.

  Many overlay properties have special meanings; here is a table
of them:

@table @code
@item priority
@kindex priority @r{(overlay property)}
This property's value (which should be a nonnegative number) determines
the priority of the overlay.  The priority matters when two or more
overlays cover the same character and both specify a face for display;
the one whose @code{priority} value is larger takes priority over the
other, and its face attributes override the face attributes of the lower
priority overlay.

Currently, all overlays take priority over text properties.  Please
avoid using negative priority values, as we have not yet decided just
what they should mean.

@item window
@kindex window @r{(overlay property)}
If the @code{window} property is non-@code{nil}, then the overlay
applies only on that window.

@item category
@kindex category @r{(overlay property)}
If an overlay has a @code{category} property, we call it the
@dfn{category} of the overlay.  It should be a symbol.  The properties
of the symbol serve as defaults for the properties of the overlay.

@item face
@kindex face @r{(overlay property)}
This property controls the way text is displayed---for example, which
font and which colors.  @xref{Faces}, for more information.

In the simplest case, the value is a face name.  It can also be a list;
then each element can be any of these possibilities:

@itemize @bullet
@item
A face name (a symbol or string).

@item
Starting in Emacs 21, a property list of face attributes.  This has the
form (@var{keyword} @var{value} @dots{}), where each @var{keyword} is a
face attribute name and @var{value} is a meaningful value for that
attribute.  With this feature, you do not need to create a face each
time you want to specify a particular attribute for certain text.
@xref{Face Attributes}.

@item
A cons cell of the form @code{(foreground-color . @var{color-name})} or
@code{(background-color . @var{color-name})}.  These elements specify
just the foreground color or just the background color.

@code{(foreground-color . @var{color-name})} is equivalent to
@code{(:foreground @var{color-name})}, and likewise for the background.
@end itemize

@item mouse-face
@kindex mouse-face @r{(overlay property)}
This property is used instead of @code{face} when the mouse is within
the range of the overlay.

@item display
@kindex display @r{(overlay property)}
This property activates various features that change the
way text is displayed.  For example, it can make text appear taller
or shorter, higher or lower, wider or narrower, or replaced with an image.
@xref{Display Property}.

@item help-echo
@kindex help-echo @r{(text property)}
If an overlay has a @code{help-echo} property, then when you move the
mouse onto the text in the overlay, Emacs displays a help string in the
echo area, or in the tooltip window.  For details see @ref{Text
help-echo}.  This feature is available starting in Emacs 21.

@item modification-hooks
@kindex modification-hooks @r{(overlay property)}
This property's value is a list of functions to be called if any
character within the overlay is changed or if text is inserted strictly
within the overlay.

The hook functions are called both before and after each change.
If the functions save the information they receive, and compare notes
between calls, they can determine exactly what change has been made
in the buffer text.

When called before a change, each function receives four arguments: the
overlay, @code{nil}, and the beginning and end of the text range to be
modified.

When called after a change, each function receives five arguments: the
overlay, @code{t}, the beginning and end of the text range just
modified, and the length of the pre-change text replaced by that range.
(For an insertion, the pre-change length is zero; for a deletion, that
length is the number of characters deleted, and the post-change
beginning and end are equal.)

@item insert-in-front-hooks
@kindex insert-in-front-hooks @r{(overlay property)}
This property's value is a list of functions to be called before and
after inserting text right at the beginning of the overlay.  The calling
conventions are the same as for the @code{modification-hooks} functions.

@item insert-behind-hooks
@kindex insert-behind-hooks @r{(overlay property)}
This property's value is a list of functions to be called before and
after inserting text right at the end of the overlay.  The calling
conventions are the same as for the @code{modification-hooks} functions.

@item invisible
@kindex invisible @r{(overlay property)}
The @code{invisible} property can make the text in the overlay
invisible, which means that it does not appear on the screen.
@xref{Invisible Text}, for details.

@item intangible
@kindex intangible @r{(overlay property)}
The @code{intangible} property on an overlay works just like the
@code{intangible} text property.  @xref{Special Properties}, for details.

@item isearch-open-invisible
This property tells incremental search how to make an invisible overlay
visible, permanently, if the final match overlaps it.  @xref{Invisible
Text}.

@item isearch-open-invisible-temporary
This property tells incremental search how to make an invisible overlay
visible, temporarily, during the search.  @xref{Invisible Text}.

@item before-string
@kindex before-string @r{(overlay property)}
This property's value is a string to add to the display at the beginning
of the overlay.  The string does not appear in the buffer in any
sense---only on the screen.

@item after-string
@kindex after-string @r{(overlay property)}
This property's value is a string to add to the display at the end of
the overlay.  The string does not appear in the buffer in any
sense---only on the screen.

@item evaporate
@kindex evaporate @r{(overlay property)}
If this property is non-@code{nil}, the overlay is deleted automatically
if it ever becomes empty (i.e., if it spans no characters).

@item local-map
@cindex keymap of character (and overlays)
@kindex local-map @r{(overlay property)}
If this property is non-@code{nil}, it specifies a keymap for a portion
of the text.  The property's value replaces the buffer's local map, when
the character after point is within the overlay.  @xref{Active Keymaps}.

@item keymap
@kindex keymap @r{(overlay property)}
The @code{keymap} property is similar to @code{local-map} but overrides the
buffer's local map (and the map specified by the @code{local-map}
property) rather than replacing it.
@end table

@node Managing Overlays
@subsection Managing Overlays

  This section describes the functions to create, delete and move
overlays, and to examine their contents.

@defun make-overlay start end &optional buffer front-advance rear-advance
This function creates and returns an overlay that belongs to
@var{buffer} and ranges from @var{start} to @var{end}.  Both @var{start}
and @var{end} must specify buffer positions; they may be integers or
markers.  If @var{buffer} is omitted, the overlay is created in the
current buffer.

The arguments @var{front-advance} and @var{rear-advance} specify the
insertion type for the start of the overlay and for the end of the
overlay, respectively.  @xref{Marker Insertion Types}.
@end defun

@defun overlay-start overlay
This function returns the position at which @var{overlay} starts,
as an integer.
@end defun

@defun overlay-end overlay
This function returns the position at which @var{overlay} ends,
as an integer.
@end defun

@defun overlay-buffer overlay
This function returns the buffer that @var{overlay} belongs to.
@end defun

@defun delete-overlay overlay
This function deletes @var{overlay}.  The overlay continues to exist as
a Lisp object, and its property list is unchanged, but it ceases to be
attached to the buffer it belonged to, and ceases to have any effect on
display.

A deleted overlay is not permanently disconnected.  You can give it a
position in a buffer again by calling @code{move-overlay}.
@end defun

@defun move-overlay overlay start end &optional buffer
This function moves @var{overlay} to @var{buffer}, and places its bounds
at @var{start} and @var{end}.  Both arguments @var{start} and @var{end}
must specify buffer positions; they may be integers or markers.

If @var{buffer} is omitted, @var{overlay} stays in the same buffer it
was already associated with; if @var{overlay} was deleted, it goes into
the current buffer.

The return value is @var{overlay}.

This is the only valid way to change the endpoints of an overlay.  Do
not try modifying the markers in the overlay by hand, as that fails to
update other vital data structures and can cause some overlays to be
``lost''.
@end defun

  Here are some examples:

@example
;; @r{Create an overlay.}
(setq foo (make-overlay 1 10))
     @result{} #<overlay from 1 to 10 in display.texi>
(overlay-start foo)
     @result{} 1
(overlay-end foo)
     @result{} 10
(overlay-buffer foo)
     @result{} #<buffer display.texi>
;; @r{Give it a property we can check later.}
(overlay-put foo 'happy t)
     @result{} t
;; @r{Verify the property is present.}
(overlay-get foo 'happy)
     @result{} t
;; @r{Move the overlay.}
(move-overlay foo 5 20)
     @result{} #<overlay from 5 to 20 in display.texi>
(overlay-start foo)
     @result{} 5
(overlay-end foo)
     @result{} 20
;; @r{Delete the overlay.}
(delete-overlay foo)
     @result{} nil
;; @r{Verify it is deleted.}
foo
     @result{} #<overlay in no buffer>
;; @r{A deleted overlay has no position.}
(overlay-start foo)
     @result{} nil
(overlay-end foo)
     @result{} nil
(overlay-buffer foo)
     @result{} nil
;; @r{Undelete the overlay.}
(move-overlay foo 1 20)
     @result{} #<overlay from 1 to 20 in display.texi>
;; @r{Verify the results.}
(overlay-start foo)
     @result{} 1
(overlay-end foo)
     @result{} 20
(overlay-buffer foo)
     @result{} #<buffer display.texi>
;; @r{Moving and deleting the overlay does not change its properties.}
(overlay-get foo 'happy)
     @result{} t
@end example

@node Finding Overlays
@subsection Searching for Overlays

@defun overlays-at pos
This function returns a list of all the overlays that cover the
character at position @var{pos} in the current buffer.  The list is in
no particular order.  An overlay contains position @var{pos} if it
begins at or before @var{pos}, and ends after @var{pos}.

To illustrate usage, here is a Lisp function that returns a list of the
overlays that specify property @var{prop} for the character at point:

@smallexample
(defun find-overlays-specifying (prop)
  (let ((overlays (overlays-at (point)))
        found)
    (while overlays
      (let ((overlay (car overlays)))
        (if (overlay-get overlay prop)
            (setq found (cons overlay found))))
      (setq overlays (cdr overlays)))
    found))
@end smallexample
@end defun

@defun overlays-in beg end
This function returns a list of the overlays that overlap the region
@var{beg} through @var{end}.  ``Overlap'' means that at least one
character is contained within the overlay and also contained within the
specified region; however, empty overlays are included in the result if
they are located at @var{beg}, or strictly between @var{beg} and @var{end}.
@end defun

@defun next-overlay-change pos
This function returns the buffer position of the next beginning or end
of an overlay, after @var{pos}.
@end defun

@defun previous-overlay-change pos
This function returns the buffer position of the previous beginning or
end of an overlay, before @var{pos}.
@end defun

  Here's an easy way to use @code{next-overlay-change} to search for the
next character which gets a non-@code{nil} @code{happy} property from
either its overlays or its text properties (@pxref{Property Search}):

@smallexample
(defun find-overlay-prop (prop)
  (save-excursion
    (while (and (not (eobp))
                (not (get-char-property (point) 'happy)))
      (goto-char (min (next-overlay-change (point))
                      (next-single-property-change (point) 'happy))))
    (point)))
@end smallexample

@node Width
@section Width

Since not all characters have the same width, these functions let you
check the width of a character.  @xref{Primitive Indent}, and
@ref{Screen Lines}, for related functions.

@defun char-width char
This function returns the width in columns of the character @var{char},
if it were displayed in the current buffer and the selected window.
@end defun

@defun string-width string
This function returns the width in columns of the string @var{string},
if it were displayed in the current buffer and the selected window.
@end defun

@defun truncate-string-to-width string width &optional start-column padding
This function returns the part of @var{string} that fits within
@var{width} columns, as a new string.

If @var{string} does not reach @var{width}, then the result ends where
@var{string} ends.  If one multi-column character in @var{string}
extends across the column @var{width}, that character is not included in
the result.  Thus, the result can fall short of @var{width} but cannot
go beyond it.

The optional argument @var{start-column} specifies the starting column.
If this is non-@code{nil}, then the first @var{start-column} columns of
the string are omitted from the value.  If one multi-column character in
@var{string} extends across the column @var{start-column}, that
character is not included.

The optional argument @var{padding}, if non-@code{nil}, is a padding
character added at the beginning and end of the result string, to extend
it to exactly @var{width} columns.  The padding character is used at the
end of the result if it falls short of @var{width}.  It is also used at
the beginning of the result if one multi-column character in
@var{string} extends across the column @var{start-column}.

@example
(truncate-string-to-width "\tab\t" 12 4)
     @result{} "ab"
(truncate-string-to-width "\tab\t" 12 4 ?\ )
     @result{} "    ab  "
@end example
@end defun

@node Faces
@section Faces
@cindex face

  A @dfn{face} is a named collection of graphical attributes: font
family, foreground color, background color, optional underlining, and
many others.  Faces are used in Emacs to control the style of display of
particular parts of the text or the frame.

@cindex face id
Each face has its own @dfn{face number}, which distinguishes faces at
low levels within Emacs.  However, for most purposes, you refer to
faces in Lisp programs by their names.

@defun facep object
This function returns @code{t} if @var{object} is a face name symbol (or
if it is a vector of the kind used internally to record face data).  It
returns @code{nil} otherwise.
@end defun

Each face name is meaningful for all frames, and by default it has the
same meaning in all frames.  But you can arrange to give a particular
face name a special meaning in one frame if you wish.

@menu
* Standard Faces::      The faces Emacs normally comes with.
* Defining Faces::      How to define a face with @code{defface}.
* Face Attributes::     What is in a face?
* Attribute Functions:: Functions to examine and set face attributes.
* Merging Faces::	How Emacs combines the faces specified for a character.
* Font Selection::      Finding the best available font for a face.
* Face Functions::	How to define and examine faces.
* Auto Faces::          Hook for automatic face assignment.
* Font Lookup::         Looking up the names of available fonts
                          and information about them.
* Fontsets::            A fontset is a collection of fonts
                          that handle a range of character sets.
@end menu

@node Standard Faces
@subsection Standard Faces

  This table lists all the standard faces and their uses.  Most of them
are used for displaying certain parts of the frames or certain kinds of
text; you can control how those places look by customizing these faces.

@table @code
@item default
@kindex default @r{(face name)}
This face is used for ordinary text.

@item mode-line
@kindex mode-line @r{(face name)}
This face is used for mode lines, and for menu bars when toolkit menus
are not used---but only if @code{mode-line-inverse-video} is
non-@code{nil}.

@item modeline
@kindex modeline @r{(face name)}
This is an alias for the @code{mode-line} face, for compatibility with
old Emacs versions.

@item header-line
@kindex header-line @r{(face name)}
This face is used for the header lines of windows that have them.

@item menu
This face controls the display of menus, both their colors and their
font.  (This works only on certain systems.)

@item fringe
@kindex fringe @r{(face name)}
This face controls the colors of window fringes, the thin areas on
either side that are used to display continuation and truncation glyphs.

@item scroll-bar
@kindex scroll-bar @r{(face name)}
This face controls the colors for display of scroll bars.

@item tool-bar
@kindex tool-bar @r{(face name)}
This face is used for display of the tool bar, if any.

@item region
@kindex region @r{(face name)}
This face is used for highlighting the region in Transient Mark mode.

@item secondary-selection
@kindex secondary-selection @r{(face name)}
This face is used to show any secondary selection you have made.

@item highlight
@kindex highlight @r{(face name)}
This face is meant to be used for highlighting for various purposes.

@item trailing-whitespace
@kindex trailing-whitespace @r{(face name)}
This face is used to display excess whitespace at the end of a line,
if @code{show-trailing-whitespace} is non-@code{nil}.
@end table

  In contrast, these faces are provided to change the appearance of text
in specific ways.  You can use them on specific text, when you want
the effects they produce.

@table @code
@item bold
@kindex bold @r{(face name)}
This face uses a bold font, if possible.  It uses the bold variant of
the frame's font, if it has one.  It's up to you to choose a default
font that has a bold variant, if you want to use one.

@item italic
@kindex italic @r{(face name)}
This face uses the italic variant of the frame's font, if it has one.

@item bold-italic
@kindex bold-italic @r{(face name)}
This face uses the bold italic variant of the frame's font, if it has
one.

@item underline
@kindex underline @r{(face name)}
This face underlines text.

@item fixed-pitch
@kindex fixed-pitch @r{(face name)}
This face forces use of a particular fixed-width font.

@item variable-pitch
@kindex variable-pitch @r{(face name)}
This face forces use of a particular variable-width font.  It's
reasonable to customize this to use a different variable-width font, if
you like, but you should not make it a fixed-width font.
@end table

@defvar show-trailing-whitespace
@tindex show-trailing-whitespace
If this variable is non-@code{nil}, Emacs uses the
@code{trailing-whitespace} face to display any spaces and tabs at the
end of a line.
@end defvar

@node Defining Faces
@subsection Defining Faces

  The way to define a new face is with @code{defface}.  This creates a
kind of customization item (@pxref{Customization}) which the user can
customize using the Customization buffer (@pxref{Easy Customization,,,
emacs, The GNU Emacs Manual}).

@defmac defface face spec doc [keyword value]... 
This declares @var{face} as a customizable face that defaults according
to @var{spec}.  You should not quote the symbol @var{face}.  The
argument @var{doc} specifies the face documentation.  The keywords you
can use in @code{defface} are the same ones that are meaningful in both
@code{defgroup} and @code{defcustom} (@pxref{Common Keywords}).

When @code{defface} executes, it defines the face according to
@var{spec}, then uses any customizations that were read from the
init file (@pxref{Init File}) to override that specification.

The purpose of @var{spec} is to specify how the face should appear on
different kinds of terminals.  It should be an alist whose elements have
the form @code{(@var{display} @var{atts})}.  Each element's @sc{car},
@var{display}, specifies a class of terminals.  The element's second element,
@var{atts}, is a list of face attributes and their values; it specifies
what the face should look like on that kind of terminal.  The possible
attributes are defined in the value of @code{custom-face-attributes}.

The @var{display} part of an element of @var{spec} determines which
frames the element applies to.  If more than one element of @var{spec}
matches a given frame, the first matching element is the only one used
for that frame.  There are two possibilities for @var{display}:

@table @asis
@item @code{t}
This element of @var{spec} matches all frames.  Therefore, any
subsequent elements of @var{spec} are never used.  Normally
@code{t} is used in the last (or only) element of @var{spec}.

@item a list
If @var{display} is a list, each element should have the form
@code{(@var{characteristic} @var{value}@dots{})}.  Here
@var{characteristic} specifies a way of classifying frames, and the
@var{value}s are possible classifications which @var{display} should
apply to.  Here are the possible values of @var{characteristic}:

@table @code
@item type
The kind of window system the frame uses---either @code{graphic} (any
graphics-capable display), @code{x}, @code{pc} (for the MS-DOS console),
@code{w32} (for MS Windows 9X/NT), or @code{tty} (a non-graphics-capable
display).

@item class
What kinds of colors the frame supports---either @code{color},
@code{grayscale}, or @code{mono}.

@item background
The kind of background---either @code{light} or @code{dark}.
@end table

If an element of @var{display} specifies more than one @var{value} for a
given @var{characteristic}, any of those values is acceptable.  If
@var{display} has more than one element, each element should specify a
different @var{characteristic}; then @emph{each} characteristic of the
frame must match one of the @var{value}s specified for it in
@var{display}.
@end table
@end defmac

  Here's how the standard face @code{region} is defined:

@example
@group
(defface region
  `((((type tty) (class color))
     (:background "blue" :foreground "white"))
@end group
    (((type tty) (class mono))
     (:inverse-video t))
    (((class color) (background dark))
     (:background "blue"))
    (((class color) (background light))
     (:background "lightblue"))
    (t (:background "gray")))
@group
  "Basic face for highlighting the region."
  :group 'basic-faces)
@end group
@end example

  Internally, @code{defface} uses the symbol property
@code{face-defface-spec} to record the face attributes specified in
@code{defface}, @code{saved-face} for the attributes saved by the user
with the customization buffer, and @code{face-documentation} for the
documentation string.

@defopt frame-background-mode
This option, if non-@code{nil}, specifies the background type to use for
interpreting face definitions.  If it is @code{dark}, then Emacs treats
all frames as if they had a dark background, regardless of their actual
background colors.  If it is @code{light}, then Emacs treats all frames
as if they had a light background.
@end defopt

@node Face Attributes
@subsection Face Attributes
@cindex face attributes

  The effect of using a face is determined by a fixed set of @dfn{face
attributes}.  This table lists all the face attributes, and what they
mean.  Note that in general, more than one face can be specified for a
given piece of text; when that happens, the attributes of all the faces
are merged to specify how to display the text.  @xref{Merging Faces}.

  In Emacs 21, any attribute in a face can have the value
@code{unspecified}.  This means the face doesn't specify that attribute.
In face merging, when the first face fails to specify a particular
attribute, that means the next face gets a chance.  However, the
@code{default} face must specify all attributes.

  Some of these font attributes are meaningful only on certain kinds of
displays---if your display cannot handle a certain attribute, the
attribute is ignored.  (The attributes @code{:family}, @code{:width},
@code{:height}, @code{:weight}, and @code{:slant} correspond to parts of
an X Logical Font Descriptor.)

@table @code
@item :family
Font family name, or fontset name (@pxref{Fontsets}).  If you specify a
font family name, the wild-card characters @samp{*} and @samp{?} are
allowed.

@item :width
Relative proportionate width, also known as the character set width or
set width.  This should be one of the symbols @code{ultra-condensed},
@code{extra-condensed}, @code{condensed}, @code{semi-condensed},
@code{normal}, @code{semi-expanded}, @code{expanded},
@code{extra-expanded}, or @code{ultra-expanded}.
   
@item :height
Either the font height, an integer in units of 1/10 point, a floating
point number specifying the amount by which to scale the height of any
underlying face, or a function, which is called with the old height
(from the underlying face), and should return the new height.
   
@item :weight
Font weight---a symbol from this series (from most dense to most faint):
@code{ultra-bold}, @code{extra-bold}, @code{bold}, @code{semi-bold},
@code{normal}, @code{semi-light}, @code{light}, @code{extra-light},
or @code{ultra-light}.

On a text-only terminal, any weight greater than normal is displayed as
extra bright, and any weight less than normal is displayed as
half-bright (provided the terminal supports the feature).

@item :slant
Font slant---one of the symbols @code{italic}, @code{oblique}, @code{normal},
@code{reverse-italic}, or @code{reverse-oblique}.

On a text-only terminal, slanted text is displayed as half-bright, if
the terminal supports the feature.

@item :foreground
Foreground color, a string.
   
@item :background
Background color, a string.

@item :inverse-video
Whether or not characters should be displayed in inverse video.  The
value should be @code{t} (yes) or @code{nil} (no).

@item :stipple
The background stipple, a bitmap.

The value can be a string; that should be the name of a file containing
external-format X bitmap data.  The file is found in the directories
listed in the variable @code{x-bitmap-file-path}.

Alternatively, the value can specify the bitmap directly, with a list of
the form @code{(@var{width} @var{height} @var{data})}.  Here,
@var{width} and @var{height} specify the size in pixels, and @var{data}
is a string containing the raw bits of the bitmap, row by row.  Each row
occupies @math{(@var{width} + 7) / 8} consecutie bytes in the string
(which should be a unibyte string for best results).

If the value is @code{nil}, that means use no stipple pattern.

Normally you do not need to set the stipple attribute, because it is
used automatically to handle certain shades of gray.

@item :underline
Whether or not characters should be underlined, and in what color.  If
the value is @code{t}, underlining uses the foreground color of the
face.  If the value is a string, underlining uses that color.  The
value @code{nil} means do not underline.

@item :overline
Whether or not characters should be overlined, and in what color.
The value is used like that of @code{:underline}.

@item :strike-through
Whether or not characters should be strike-through, and in what
color.  The value is used like that of @code{:underline}.

@item :inherit
The name of a face from which to inherit attributes, or a list of face
names.  Attributes from inherited faces are merged into the face like an
underlying face would be, with higher priority than underlying faces.

@item :box
Whether or not a box should be drawn around characters, its color, the
width of the box lines, and 3D appearance.
@end table

  Here are the possible values of the @code{:box} attribute, and what
they mean:

@table @asis
@item @code{nil}
Don't draw a box.

@item @code{t}
Draw a box with lines of width 1, in the foreground color.

@item @var{color}
Draw a box with lines of width 1, in color @var{color}.

@item @code{(:line-width @var{width} :color @var{color} :style @var{style})}
This way you can explicitly specify all aspects of the box.  The value
@var{width} specifies the width of the lines to draw; it defaults to 1.

The value @var{color} specifies the color to draw with.  The default is
the foreground color of the face for simple boxes, and the background
color of the face for 3D boxes.

The value @var{style} specifies whether to draw a 3D box.  If it is
@code{released-button}, the box looks like a 3D button that is not being
pressed.  If it is @code{pressed-button}, the box looks like a 3D button
that is being pressed.  If it is @code{nil} or omitted, a plain 2D box
is used.
@end table

  The attributes @code{:overline}, @code{:strike-through} and
@code{:box} are new in Emacs 21.  The attributes @code{:family},
@code{:height}, @code{:width}, @code{:weight}, @code{:slant} are also
new; previous versions used the following attributes, now semi-obsolete,
to specify some of the same information:

@table @code
@item :font
This attribute specifies the font name.

@item :bold
A non-@code{nil} value specifies a bold font.

@item :italic
A non-@code{nil} value specifies an italic font.
@end table

  For compatibility, you can still set these ``attributes'' in Emacs 21,
even though they are not real face attributes.  Here is what that does:

@table @code
@item :font
You can specify an X font name as the ``value'' of this ``attribute'';
that sets the @code{:family}, @code{:width}, @code{:height},
@code{:weight}, and @code{:slant} attributes according to the font name.

If the value is a pattern with wildcards, the first font that matches
the pattern is used to set these attributes.

@item :bold
A non-@code{nil} makes the face bold; @code{nil} makes it normal.
This actually works by setting the @code{:weight} attribute.

@item :italic
A non-@code{nil} makes the face italic; @code{nil} makes it normal.
This actually works by setting the @code{:slant} attribute.
@end table

@defvar x-bitmap-file-path
This variable specifies a list of directories for searching
for bitmap files, for the @code{:stipple} attribute.
@end defvar

@defun bitmap-spec-p object
This returns @code{t} if @var{object} is a valid bitmap
specification, suitable for use with @code{:stipple}.
It returns @code{nil} otherwise.
@end defun

@node Attribute Functions
@subsection Face Attribute Functions

  You can modify the attributes of an existing face with the following
functions.  If you specify @var{frame}, they affect just that frame;
otherwise, they affect all frames as well as the defaults that apply to
new frames.

@tindex set-face-attribute
@defun set-face-attribute face frame &rest arguments
This function sets one or more attributes of face @var{face}
for frame @var{frame}.  If @var{frame} is @code{nil}, it sets
the attribute for all frames, and the defaults for new frames.

The extra arguments @var{arguments} specify the attributes to set, and
the values for them.  They should consist of alternating attribute names
(such as @code{:family} or @code{:underline}) and corresponding values.
Thus,

@example
(set-face-attribute 'foo nil
                    :width :extended
                    :weight :bold
                    :underline "red")
@end example

@noindent
sets the attributes @code{:width}, @code{:weight} and @code{:underline}
to the corresponding values.
@end defun

@tindex face-attribute
@defun face-attribute face attribute &optional frame
This returns the value of the @var{attribute} attribute of face
@var{face} on @var{frame}.  If @var{frame} is @code{nil},
that means the selected frame (@pxref{Input Focus}).

If @var{frame} is @code{t}, the value is the default for
@var{face} for new frames.

For example,

@example
(face-attribute 'bold :weight)
     @result{} bold
@end example
@end defun

  The functions above did not exist before Emacs 21.  For compatibility
with older Emacs versions, you can use the following functions to set
and examine the face attributes which existed in those versions.

@defun set-face-foreground face color &optional frame
@defunx set-face-background face color &optional frame
These functions set the foreground (or background, respectively) color
of face @var{face} to @var{color}.  The argument @var{color} should be a
string, the name of a color.

Certain shades of gray are implemented by stipple patterns on
black-and-white screens.
@end defun

@defun set-face-stipple face pattern &optional frame
This function sets the background stipple pattern of face @var{face} to
@var{pattern}.  The argument @var{pattern} should be the name of a
stipple pattern defined by the X server, or @code{nil} meaning don't use
stipple.

Normally there is no need to pay attention to stipple patterns, because
they are used automatically to handle certain shades of gray.
@end defun

@defun set-face-font face font &optional frame
This function sets the font of face @var{face}.

In Emacs 21, this actually sets the attributes @code{:family},
@code{:width}, @code{:height}, @code{:weight}, and @code{:slant}
according to the font name @var{font}.

In Emacs 20, this sets the font attribute.  Once you set the font
explicitly, the bold and italic attributes cease to have any effect,
because the precise font that you specified is used.
@end defun

@defun set-face-bold-p face bold-p &optional frame
This function specifies whether @var{face} should be bold.  If
@var{bold-p} is non-@code{nil}, that means yes; @code{nil} means no.

In Emacs 21, this sets the @code{:weight} attribute.
In Emacs 20, it sets the @code{:bold} attribute.
@end defun

@defun set-face-italic-p face italic-p &optional frame
This function specifies whether @var{face} should be italic.  If
@var{italic-p} is non-@code{nil}, that means yes; @code{nil} means no.

In Emacs 21, this sets the @code{:slant} attribute.
In Emacs 20, it sets the @code{:italic} attribute.
@end defun

@defun set-face-underline-p face underline-p &optional frame
This function sets the underline attribute of face @var{face}.
Non-@code{nil} means do underline; @code{nil} means don't.
@end defun

@defun invert-face face &optional frame
This function inverts the @code{:inverse-video} attribute of face
@var{face}.  If the attribute is @code{nil}, this function sets it to
@code{t}, and vice versa.
@end defun

  These functions examine the attributes of a face.  If you don't
specify @var{frame}, they refer to the default data for new frames.
They return the symbol @code{unspecified} if the face doesn't define any
value for that attribute.

@defun face-foreground face &optional frame
@defunx face-background face &optional frame
These functions return the foreground color (or background color,
respectively) of face @var{face}, as a string.
@end defun

@defun face-stipple face &optional frame
This function returns the name of the background stipple pattern of face
@var{face}, or @code{nil} if it doesn't have one.
@end defun

@defun face-font face &optional frame
This function returns the name of the font of face @var{face}.
@end defun

@defun face-bold-p face &optional frame
This function returns @code{t} if @var{face} is bold---that is, if it is
bolder than normal.  It returns @code{nil} otherwise.
@end defun

@defun face-italic-p face &optional frame
This function returns @code{t} if @var{face} is italic or oblique,
@code{nil} otherwise.
@end defun

@defun face-underline-p face &optional frame
This function returns the @code{:underline} attribute of face @var{face}.
@end defun

@defun face-inverse-video-p face &optional frame
This function returns the @code{:inverse-video} attribute of face @var{face}.
@end defun

@node Merging Faces
@subsection Merging Faces for Display

  Here are the ways to specify which faces to use for display of text:

@itemize @bullet
@item
With defaults.  The @code{default} face is used as the ultimate
default for all text.  (In Emacs 19 and 20, the @code{default}
face is used only when no other face is specified.)

For a mode line or header line, the face @code{modeline} or
@code{header-line} is used just before @code{default}.

@item
With text properties.  A character can have a @code{face} property; if
so, the faces and face attributes specified there apply.  @xref{Special
Properties}.

If the character has a @code{mouse-face} property, that is used instead
of the @code{face} property when the mouse is ``near enough'' to the
character.

@item
With overlays.  An overlay can have @code{face} and @code{mouse-face}
properties too; they apply to all the text covered by the overlay.

@item
With a region that is active.  In Transient Mark mode, the region is
highlighted with the face @code{region} (@pxref{Standard Faces}).

@item
With special glyphs.  Each glyph can specify a particular face 
number.  @xref{Glyphs}.
@end itemize

  If these various sources together specify more than one face for a
particular character, Emacs merges the attributes of the various faces
specified.  The attributes of the faces of special glyphs come first;
then comes the face for region highlighting, if appropriate;
then come attributes of faces from overlays, followed by those from text
properties, and last the default face.

  When multiple overlays cover one character, an overlay with higher
priority overrides those with lower priority.  @xref{Overlays}.

  In Emacs 20, if an attribute such as the font or a color is not
specified in any of the above ways, the frame's own font or color is
used.  In newer Emacs versions, this cannot happen, because the
@code{default} face specifies all attributes---in fact, the frame's own
font and colors are synonymous with those of the default face.

@node Font Selection
@subsection Font Selection

  @dfn{Selecting a font} means mapping the specified face attributes for
a character to a font that is available on a particular display.  The
face attributes, as determined by face merging, specify most of the
font choice, but not all.  Part of the choice depends on what character
it is.

  For multibyte characters, typically each font covers only one
character set.  So each character set (@pxref{Character Sets}) specifies
a registry and encoding to use, with the character set's
@code{x-charset-registry} property.  Its value is a string containing
the registry and the encoding, with a dash between them:

@example
(plist-get (charset-plist 'latin-iso8859-1)
           'x-charset-registry)
     @result{} "ISO8859-1"
@end example

  Unibyte text does not have character sets, so displaying a unibyte
character takes the registry and encoding from the variable
@code{face-default-registry}.

@defvar face-default-registry
This variable specifies which registry and encoding to use in choosing
fonts for unibyte characters.  The value is initialized at Emacs startup
time from the font the user specified for Emacs.
@end defvar

  If the face specifies a fontset name, that fontset determines a
pattern for fonts of the given charset.  If the face specifies a font
family, a font pattern is constructed.

  Emacs tries to find an available font for the given face attributes
and character's registry and encoding.  If there is a font that matches
exactly, it is used, of course.  The hard case is when no available font
exactly fits the specification.  Then Emacs looks for one that is
``close''---one attribute at a time.  You can specify the order to
consider the attributes.  In the case where a specified font family is
not available, you can specify a set of mappings for alternatives to
try.

@defvar face-font-selection-order
@tindex face-font-selection-order
This variable specifies the order of importance of the face attributes
@code{:width}, @code{:height}, @code{:weight}, and @code{:slant}.  The
value should be a list containing those four symbols, in order of
decreasing importance.

Font selection first finds the best available matches for the first
attribute listed; then, among the fonts which are best in that way, it
searches for the best matches in the second attribute, and so on.

The attributes @code{:weight} and @code{:width} have symbolic values in
a range centered around @code{normal}.  Matches that are more extreme
(farther from @code{normal}) are somewhat preferred to matches that are
less extreme (closer to @code{normal}); this is designed to ensure that
non-normal faces contrast with normal ones, whenever possible.

The default is @code{(:width :height :weight :slant)}, which means first
find the fonts closest to the specified @code{:width}, then---among the
fonts with that width---find a best match for the specified font height,
and so on.

One example of a case where this variable makes a difference is when the
default font has no italic equivalent.  With the default ordering, the
@code{italic} face will use a non-italic font that is similar to the
default one.  But if you put @code{:slant} before @code{:height}, the
@code{italic} face will use an italic font, even if its height is not
quite right.
@end defvar

@defvar face-font-family-alternatives
@tindex face-font-family-alternatives
This variable lets you specify alternative font families to try, if a
given family is specified and doesn't exist.  Each element should have
this form:

@example
(@var{family} @var{alternate-families}@dots{})
@end example

If @var{family} is specified but not available, Emacs will try the other
families given in @var{alternate-families}, one by one, until it finds a
family that does exist.
@end defvar

@defvar face-font-registry-alternatives
@tindex face-font-registry-alternatives
This variable lets you specify alternative font registries to try, if a
given registry is specified and doesn't exist.  Each element should have
this form:

@example
(@var{registry} @var{alternate-registries}@dots{})
@end example

If @var{registry} is specified but not available, Emacs will try the
other registries given in @var{alternate-registries}, one by one,
until it finds a registry that does exist.
@end defvar

  Emacs can make use of scalable fonts, but by default it does not use
them, since the use of too many or too big scalable fonts can crash
XFree86 servers.

@defvar scalable-fonts-allowed
@tindex scalable-fonts-allowed
This variable controls which scalable fonts to use.  A value of
@code{nil}, the default, means do not use scalable fonts.  @code{t}
means to use any scalable font that seems appropriate for the text.

Otherwise, the value must be a list of regular expressions.  Then a
scalable font is enabled for use if its name matches any regular
expression in the list.  For example,

@example
(setq scalable-fonts-allowed '("muleindian-2$"))
@end example

@noindent
allows the use of scalable fonts with registry @code{muleindian-2}.
@end defvar

@defun clear-face-cache &optional unload-p
@tindex clear-face-cache
This function clears the face cache for all frames.
If @var{unload-p} is non-@code{nil}, that means to unload
all unused fonts as well.
@end defun

@node Face Functions
@subsection Functions for Working with Faces

  Here are additional functions for creating and working with faces.

@defun make-face name
This function defines a new face named @var{name}, initially with all
attributes @code{nil}.  It does nothing if there is already a face named
@var{name}.
@end defun

@defun face-list
This function returns a list of all defined face names.
@end defun

@defun copy-face old-face new-name &optional frame new-frame
This function defines the face @var{new-name} as a copy of the existing
face named @var{old-face}.  It creates the face @var{new-name} if that
doesn't already exist.

If the optional argument @var{frame} is given, this function applies
only to that frame.  Otherwise it applies to each frame individually,
copying attributes from @var{old-face} in each frame to @var{new-face}
in the same frame.

If the optional argument @var{new-frame} is given, then @code{copy-face}
copies the attributes of @var{old-face} in @var{frame} to @var{new-name}
in @var{new-frame}.
@end defun

@defun face-id face
This function returns the face number of face @var{face}.
@end defun

@defun face-documentation face
This function returns the documentation string of face @var{face}, or
@code{nil} if none was specified for it.
@end defun

@defun face-equal face1 face2 &optional frame
This returns @code{t} if the faces @var{face1} and @var{face2} have the
same attributes for display.
@end defun

@defun face-differs-from-default-p face &optional frame
This returns @code{t} if the face @var{face} displays differently from
the default face.  A face is considered to be ``the same'' as the
default face if each attribute is either the same as that of the default
face, or unspecified (meaning to inherit from the default).
@end defun

@node Auto Faces
@subsection Automatic Face Assignment
@cindex automatic face assignment
@cindex faces, automatic choice

@cindex Font-Lock mode
  Starting with Emacs 21, a hook is available for automatically
assigning faces to text in the buffer.  This hook is used for part of
the implementation of Font-Lock mode.

@tindex fontification-functions
@defvar fontification-functions
This variable holds a list of functions that are called by Emacs
redisplay as needed to assign faces automatically to text in the buffer.

The functions are called in the order listed, with one argument, a
buffer position @var{pos}.  Each function should attempt to assign faces
to the text in the current buffer starting at @var{pos}.

Each function should record the faces they assign by setting the
@code{face} property.  It should also add a non-@code{nil}
@code{fontified} property for all the text it has assigned faces to.
That property tells redisplay that faces have been assigned to that text
already.

It is probably a good idea for each function to do nothing if the
character after @var{pos} already has a non-@code{nil} @code{fontified}
property, but this is not required.  If one function overrides the
assignments made by a previous one, the properties as they are
after the last function finishes are the ones that really matter.

For efficiency, we recommend writing these functions so that they
usually assign faces to around 400 to 600 characters at each call.
@end defvar

@node Font Lookup
@subsection Looking Up Fonts

@defun x-list-fonts pattern &optional face frame maximum
This function returns a list of available font names that match
@var{pattern}.  If the optional arguments @var{face} and @var{frame} are
specified, then the list is limited to fonts that are the same size as
@var{face} currently is on @var{frame}.

The argument @var{pattern} should be a string, perhaps with wildcard
characters: the @samp{*} character matches any substring, and the
@samp{?} character matches any single character.  Pattern matching
of font names ignores case.

If you specify @var{face} and @var{frame}, @var{face} should be a face name
(a symbol) and @var{frame} should be a frame.

The optional argument @var{maximum} sets a limit on how many fonts to
return.  If this is non-@code{nil}, then the return value is truncated
after the first @var{maximum} matching fonts.  Specifying a small value
for @var{maximum} can make this function much faster, in cases where
many fonts match the pattern.
@end defun

  These additional functions are available starting in Emacs 21.

@defun x-family-fonts &optional family frame
@tindex x-family-fonts
This function returns a list describing the available fonts for family
@var{family} on @var{frame}.  If @var{family} is omitted or @code{nil},
this list applies to all families, and therefore, it contains all
available fonts.  Otherwise, @var{family} must be a string; it may
contain the wildcards @samp{?} and @samp{*}.

The list describes the display that @var{frame} is on; if @var{frame} is
omitted or @code{nil}, it applies to the selected frame's display
(@pxref{Input Focus}).

The list contains a vector of the following form for each font:

@example
[@var{family} @var{width} @var{point-size} @var{weight} @var{slant}
 @var{fixed-p} @var{full} @var{registry-and-encoding}]
@end example

The first five elements correspond to face attributes; if you
specify these attributes for a face, it will use this font.

The last three elements give additional information about the font.
@var{fixed-p} is non-nil if the font is fixed-pitch.  @var{full} is the
full name of the font, and @var{registry-and-encoding} is a string
giving the registry and encoding of the font.

The result list is sorted according to the current face font sort order.
@end defun

@defun x-font-family-list &optional frame
@tindex x-font-family-list
This function returns a list of the font families available for
@var{frame}'s display.  If @var{frame} is omitted or @code{nil}, it
describes the selected frame's display (@pxref{Input Focus}).

The value is a list of elements of this form:

@example
(@var{family} . @var{fixed-p})
@end example

@noindent
Here @var{family} is a font family, and @var{fixed-p} is
non-@code{nil} if fonts of that family are fixed-pitch.
@end defun

@defvar font-list-limit
@tindex font-list-limit
This variable specifies maximum number of fonts to consider in font
matching.  The function @code{x-family-fonts} will not return more than
that many fonts, and font selection will consider only that many fonts
when searching a matching font for face attributes.  The default is
currently 100.
@end defvar

@node Fontsets
@subsection Fontsets

  A @dfn{fontset} is a list of fonts, each assigned to a range of
character codes.  An individual font cannot display the whole range of
characters that Emacs supports, but a fontset can.  Fontsets have names,
just as fonts do, and you can use a fontset name in place of a font name
when you specify the ``font'' for a frame or a face.  Here is
information about defining a fontset under Lisp program control.

@defun create-fontset-from-fontset-spec fontset-spec &optional style-variant-p noerror
This function defines a new fontset according to the specification
string @var{fontset-spec}.  The string should have this format:

@smallexample
@var{fontpattern}, @r{[}@var{charsetname}:@var{fontname}@r{]@dots{}}
@end smallexample

@noindent
Whitespace characters before and after the commas are ignored.

The first part of the string, @var{fontpattern}, should have the form of
a standard X font name, except that the last two fields should be
@samp{fontset-@var{alias}}.

The new fontset has two names, one long and one short.  The long name is
@var{fontpattern} in its entirety.  The short name is
@samp{fontset-@var{alias}}.  You can refer to the fontset by either
name.  If a fontset with the same name already exists, an error is
signaled, unless @var{noerror} is non-@code{nil}, in which case this
function does nothing.

If optional argument @var{style-variant-p} is non-@code{nil}, that says
to create bold, italic and bold-italic variants of the fontset as well.
These variant fontsets do not have a short name, only a long one, which
is made by altering @var{fontpattern} to indicate the bold or italic
status.

The specification string also says which fonts to use in the fontset.
See below for the details.
@end defun

  The construct @samp{@var{charset}:@var{font}} specifies which font to
use (in this fontset) for one particular character set.  Here,
@var{charset} is the name of a character set, and @var{font} is the font
to use for that character set.  You can use this construct any number of
times in the specification string.

  For the remaining character sets, those that you don't specify
explicitly, Emacs chooses a font based on @var{fontpattern}: it replaces
@samp{fontset-@var{alias}} with a value that names one character set.
For the @sc{ascii} character set, @samp{fontset-@var{alias}} is replaced
with @samp{ISO8859-1}.

  In addition, when several consecutive fields are wildcards, Emacs
collapses them into a single wildcard.  This is to prevent use of
auto-scaled fonts.  Fonts made by scaling larger fonts are not usable
for editing, and scaling a smaller font is not useful because it is
better to use the smaller font in its own size, which Emacs does.

  Thus if @var{fontpattern} is this,

@example
-*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24
@end example

@noindent
the font specification for @sc{ascii} characters would be this:

@example
-*-fixed-medium-r-normal-*-24-*-ISO8859-1
@end example

@noindent
and the font specification for Chinese GB2312 characters would be this:

@example
-*-fixed-medium-r-normal-*-24-*-gb2312*-*
@end example

  You may not have any Chinese font matching the above font
specification.  Most X distributions include only Chinese fonts that
have @samp{song ti} or @samp{fangsong ti} in the @var{family} field.  In
such a case, @samp{Fontset-@var{n}} can be specified as below:

@smallexample
Emacs.Fontset-0: -*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24,\
        chinese-gb2312:-*-*-medium-r-normal-*-24-*-gb2312*-*
@end smallexample

@noindent
Then, the font specifications for all but Chinese GB2312 characters have
@samp{fixed} in the @var{family} field, and the font specification for
Chinese GB2312 characters has a wild card @samp{*} in the @var{family}
field.

@node Display Property
@section The @code{display} Property
@cindex display specification
@kindex display @r{(text property)}

  The @code{display} text property (or overlay property) is used to
insert images into text, and also control other aspects of how text
displays.  These features are available starting in Emacs 21.  The value
of the @code{display} property should be a display specification, or a
list or vector containing several display specifications.  The rest of
this section describes several kinds of display specifications and what
they mean.

@menu
* Specified Space::     Displaying one space with a specified width.
* Other Display Specs:: Displaying an image; magnifying text; moving it
                          up or down on the page; adjusting the width 
                          of spaces within text.
* Display Margins::     Displaying text or images to the side of the main text.
* Conditional Display:: Making any of the above features conditional
                          depending on some Lisp expression.
@end menu

@node Specified Space
@subsection Specified Spaces
@cindex spaces, specified height or width
@cindex specified spaces
@cindex variable-width spaces

  To display a space of specified width and/or height, use a display
specification of the form @code{(space . @var{props})}, where
@var{props} is a property list (a list of alternating properties and
values).  You can put this property on one or more consecutive
characters; a space of the specified height and width is displayed in
place of @emph{all} of those characters.  These are the properties you
can use to specify the weight of the space:

@table @code
@item :width @var{width}
Specifies that the space width should be @var{width} times the normal
character width.  @var{width} can be an integer or floating point
number.

@item :relative-width @var{factor}
Specifies that the width of the stretch should be computed from the
first character in the group of consecutive characters that have the
same @code{display} property.  The space width is the width of that
character, multiplied by @var{factor}.

@item :align-to @var{hpos}
Specifies that the space should be wide enough to reach @var{hpos}.  The
value @var{hpos} is measured in units of the normal character width.  It
may be an interer or a floating point number.
@end table

  Exactly one of the above properties should be used.  You can also
specify the height of the space, with other properties:

@table @code
@item :height @var{height}
Specifies the height of the space, as @var{height},
measured in terms of the normal line height.

@item :relative-height @var{factor}
Specifies the height of the space, multiplying the ordinary height
of the text having this display specification by @var{factor}.

@item :ascent @var{ascent}
Specifies that @var{ascent} percent of the height of the space should be
considered as the ascent of the space---that is, the part above the
baseline.  The value of @var{ascent} must be a non-negative number no
greater than 100.
@end table

  You should not use both @code{:height} and @code{:relative-height}
together.

@node Other Display Specs
@subsection Other Display Specifications

@table @code
@item (image . @var{image-props})
This is in fact an image descriptor (@pxref{Images}).  When used as a
display specification, it means to display the image instead of the text
that has the display specification.

@item ((margin nil) @var{string})
@itemx @var{string}
A display specification of this form means to display @var{string}
instead of the text that has the display specification, at the same
position as that text.  This is a special case of marginal display
(@pxref{Display Margins}).

Recursive display specifications are not supported, i.e.@: string
display specifications that have a display specification property
themselves.

@item (space-width @var{factor})
This display specification affects all the space characters within the
text that has the specification.  It displays all of these spaces
@var{factor} times as wide as normal.  The element @var{factor} should
be an integer or float.  Characters other than spaces are not affected
at all; in particular, this has no effect on tab characters.

@item (height @var{height})
This display specification makes the text taller or shorter.
Here are the possibilities for @var{height}:

@table @asis
@item @code{(+ @var{n})}
This means to use a font that is @var{n} steps larger.  A ``step'' is
defined by the set of available fonts---specifically, those that match
what was otherwise specified for this text, in all attributes except
height.  Each size for which a suitable font is available counts as
another step.  @var{n} should be an integer.

@item @code{(- @var{n})}
This means to use a font that is @var{n} steps smaller.

@item a number, @var{factor}
A number, @var{factor}, means to use a font that is @var{factor} times
as tall as the default font.

@item a symbol, @var{function}
A symbol is a function to compute the height.  It is called with the
current height as argument, and should return the new height to use.

@item anything else, @var{form}
If the @var{height} value doesn't fit the previous possibilities, it is
a form.  Emacs evaluates it to get the new height, with the symbol
@code{height} bound to the current specified font height.
@end table

@item (raise @var{factor})
This kind of display specification raises or lowers the text
it applies to, relative to the baseline of the line.

@var{factor} must be a number, which is interpreted as a multiple of the
height of the affected text.  If it is positive, that means to display
the characters raised.  If it is negative, that means to display them
lower down.

If the text also has a @code{height} display specification, that does
not affect the amount of raising or lowering, which is based on the
faces used for the text.
@end table

@node Display Margins
@subsection Displaying in the Margins
@cindex display margins
@cindex margins, display

  A buffer can have blank areas called @dfn{display margins} on the left
and on the right.  Ordinary text never appears in these areas, but you
can put things into the display margins using the @code{display}
property.

  To put text in the left or right display margin of the window, use a
display specification of the form @code{(margin right-margin)} or
@code{(margin left-margin)} on it.  To put an image in a display margin,
use that display specification along with the display specification for
the image.

  Before the display margins can display anything, you must give
them a nonzero width.  The usual way to do that is to set these
variables:

@defvar left-margin-width
@tindex left-margin-width
This variable specifies the width of the left margin.
It is buffer-local in all buffers.
@end defvar

@defvar right-margin-width
@tindex right-margin-width
This variable specifies the width of the right margin.
It is buffer-local in all buffers.
@end defvar

  Setting these variables does not immediately affect the window.  These
variables are checked when a new buffer is displayed in the window.
Thus, you can make changes take effect by calling
@code{set-window-buffer}.

  You can also set the margin widths immediately.

@defun set-window-margins window left &optional right
@tindex set-window-margins
This function specifies the margin widths for window @var{window}.
The argument @var{left} controls the left margin and 
@var{right} controls the right margin (default @code{0}).
@end defun

@defun window-margins &optional window
@tindex window-margins
This function returns the left and right margins of @var{window}
as a cons cell of the form @code{(@var{left} . @var{right})}.
If @var{window} is @code{nil}, the selected window is used.
@end defun

@node Conditional Display
@subsection Conditional Display Specifications
@cindex conditional display specifications

  You can make any display specification conditional.  To do that,
package it in another list of the form @code{(when @var{condition} .
@var{spec})}.  Then the specification @var{spec} applies only when
@var{condition} evaluates to a non-@code{nil} value.  During the
evaluation, @code{object} is bound to the string or buffer having the
conditional @code{display} property.  @code{position} and
@code{buffer-position} are bound to the position within @code{object}
and the buffer position where the @code{display} property was found,
respectively.  Both positions can be different when @code{object} is a
string.

@node Images
@section Images
@cindex images in buffers

  To display an image in an Emacs buffer, you must first create an image
descriptor, then use it as a display specifier in the @code{display}
property of text that is displayed (@pxref{Display Property}).  Like the
@code{display} property, this feature is available starting in Emacs 21.

  Emacs can display a number of different image formats; some of them
are supported only if particular support libraries are installed on your
machine.  The supported image formats include XBM, XPM (needing the
libraries @code{libXpm} version 3.4k and @code{libz}), GIF (needing
@code{libungif} 4.1.0), Postscript, PBM, JPEG (needing the
@code{libjpeg} library version v6a), TIFF (needing @code{libtiff} v3.4),
and PNG (needing @code{libpng} 1.0.2).

  You specify one of these formats with an image type symbol.  The image
type symbols are @code{xbm}, @code{xpm}, @code{gif}, @code{postscript},
@code{pbm}, @code{jpeg}, @code{tiff}, and @code{png}.

@defvar image-types
This variable contains a list of those image type symbols that are
supported in the current configuration.
@end defvar

@menu
* Image Descriptors::   How to specify an image for use in @code{:display}.
* XBM Images::          Special features for XBM format.
* XPM Images::          Special features for XPM format.
* GIF Images::          Special features for GIF format.
* Postscript Images::   Special features for Postscript format.
* Other Image Types::   Various other formats are supported.
* Defining Images::     Convenient ways to define an image for later use.
* Showing Images::      Convenient ways to display an image once it is defined.
* Image Cache::         Internal mechanisms of image display.
@end menu

@node Image Descriptors
@subsection Image Descriptors
@cindex image descriptor

  An image description is a list of the form @code{(image
. @var{props})}, where @var{props} is a property list containing
alternating keyword symbols (symbols whose names start with a colon) and
their values.  You can use any Lisp object as a property, but the only
properties that have any special meaning are certain symbols, all of
them keywords.

  Every image descriptor must contain the property @code{:type
@var{type}} to specify the format of the image.  The value of @var{type}
should be an image type symbol; for example, @code{xpm} for an image in
XPM format.

  Here is a list of other properties that are meaningful for all image
types:

@table @code
@item :file @var{file}
The @code{:file} property specifies to load the image from file
@var{file}.  If @var{file} is not an absolute file name, it is expanded
in @code{data-directory}.

@item :data @var{data}
The @code{:data} property specifies the actual contents of the image.
Each image must use either @code{:data} or @code{:file}, but not both.
For most image types, the value of the @code{:data} property should be a
string containing the image data; we recommend using a unibyte string.

Before using @code{:data}, look for further information in the section
below describing the specific image format.  For some image types,
@code{:data} may not be supported; for some, it allows other data types;
for some, @code{:data} alone is not enough, so you need to use other
image properties along with @code{:data}.

@item :margin @var{margin}
The @code{:margin} property specifies how many pixels to add as an
extra margin around the image.  The value, @var{margin}, must be a a
non-negative number, or a pair @code{(@var{x} . @var{y})} of such
numbers.  If it is a pair, @var{x} specifies how many pixels to add
horizontally, and @var{y} specifies how many pixels to add vertically.
If @code{:margin} is not specified, the default is zero.

@item :ascent @var{ascent}
The @code{:ascent} property specifies the amount of the image's
height to use for its ascent---that is, the part above the baseline.
The value, @var{ascent}, must be a number in the range 0 to 100, or
the symbol @code{center}.

If @var{ascent} is a number, that percentage of the image's height is
used for its ascent.

If @var{ascent} is @code{center}, the image is vertically centered
around a centerline which would be the vertical centerline of text drawn
at the position of the image, in the manner specified by the text
properties and overlays that apply to the image.

If this property is omitted, it defaults to 50.

@item :relief @var{relief}
The @code{:relief} property, if non-@code{nil}, adds a shadow rectangle
around the image.  The value, @var{relief}, specifies the width of the
shadow lines, in pixels.  If @var{relief} is negative, shadows are drawn
so that the image appears as a pressed button; otherwise, it appears as
an unpressed button.

@item :conversion @var{algorithm}
The @code{:conversion} property, if non-@code{nil}, specifies a
conversion algorithm that should be applied to the image before it is
displayed; the value, @var{algorithm}, specifies which algorithm.

@table @code
@item laplace
@itemx emboss
Specifies the Laplace edge detection algorithm, which blurs out small
differences in color while highlighting larger differences.  People
sometimes consider this useful for displaying the image for a
``disabled'' button.

@item (edge-detection :matrix @var{matrix} :color-adjust @var{adjust})
Specifies a general edge-detection algorithm.  @var{matrix} must be
either a nine-element list or a nine-element vector of numbers.  A pixel
at position @math{x/y} in the transformed image is computed from
original pixels around that position.  @var{matrix} specifies, for each
pixel in the neighborhood of @math{x/y}, a factor with which that pixel
will influence the transformed pixel; element @math{0} specifies the
factor for the pixel at @math{x-1/y-1}, element @math{1} the factor for
the pixel at @math{x/y-1} etc., as shown below:
@iftex
@tex
$$\pmatrix{x-1/y-1 & x/y-1  & x+1/y-1 \cr
   x-1/y  &   x/y &    x+1/y \cr
   x-1/y+1&   x/y+1 &  x+1/y+1 \cr}$$
@end tex
@end iftex
@ifnottex
@display
  (x-1/y-1  x/y-1  x+1/y-1
   x-1/y    x/y    x+1/y
   x-1/y+1  x/y+1  x+1/y+1)
@end display
@end ifnottex

The resulting pixel is computed from the color intensity of the color
resulting from summing up the RGB values of surrounding pixels,
multiplied by the specified factors, and dividing that sum by the sum
of the factors' absolute values.

Laplace edge-detection currently uses a matrix of
@iftex
@tex
$$\pmatrix{1 & 0 & 0 \cr
   0&  0 &  0 \cr
   9 & 9 & -1 \cr}$$
@end tex
@end iftex
@ifnottex
@display
  (1  0  0
   0  0  0
   9  9 -1)
@end display
@end ifnottex

Emboss edge-detection uses a matrix of
@iftex
@tex
$$\pmatrix{ 2 & -1 &  0 \cr
   -1 &  0 &  1 \cr
    0  & 1 & -2 \cr}$$
@end tex
@end iftex
@ifnottex
@display
  ( 2 -1  0
   -1  0  1
    0  1 -2)
@end display
@end ifnottex

@item disabled
Specifies transforming the image so that it looks ``disabled''.
@end table

@item :mask @var{mask}
If @var{mask} is @code{heuristic} or @code{(heuristic @var{bg})}, build
a clipping mask for the image, so that the background of a frame is
visible behind the image.  If @var{bg} is not specified, or if @var{bg}
is @code{t}, determine the background color of the image by looking at
the four corners of the image, assuming the most frequently occurring
color from the corners is the background color of the image.  Otherwise,
@var{bg} must be a list @code{(@var{red} @var{green} @var{blue})}
specifying the color to assume for the background of the image.

If @var{mask} is nil, remove a mask from the image, if it has one.  Images
in some formats include a mask which can be removed by specifying
@code{:mask nil}.
@end table

@defun image-mask-p spec &optional frame
@tindex image-mask-p
This function returns @code{t} if image @var{spec} has a mask bitmap.
@var{frame} is the frame on which the image will be displayed.
@var{frame} @code{nil} or omitted means to use the selected frame
(@pxref{Input Focus}).
@end defun

@node XBM Images
@subsection XBM Images
@cindex XBM

  To use XBM format, specify @code{xbm} as the image type.  This image
format doesn't require an external library, so images of this type are
always supported.

  Additional image properties supported for the @code{xbm} image type are:

@table @code
@item :foreground @var{foreground}
The value, @var{foreground}, should be a string specifying the image
foreground color, or @code{nil} for the default color.  This color is
used for each pixel in the XBM that is 1.  The default is the frame's
foreground color.

@item :background @var{background}
The value, @var{background}, should be a string specifying the image
background color, or @code{nil} for the default color.  This color is
used for each pixel in the XBM that is 0.  The default is the frame's
background color.
@end table

  If you specify an XBM image using data within Emacs instead of an
external file, use the following three properties:

@table @code
@item :data @var{data}
The value, @var{data}, specifies the contents of the image.
There are three formats you can use for @var{data}:

@itemize @bullet
@item
A vector of strings or bool-vectors, each specifying one line of the
image.  Do specify @code{:height} and @code{:width}.

@item
A string containing the same byte sequence as an XBM file would contain.
You must not specify @code{:height} and @code{:width} in this case,
because omitting them is what indicates the data has the format of an
XBM file.  The file contents specify the height and width of the image.

@item
A string or a bool-vector containing the bits of the image (plus perhaps
some extra bits at the end that will not be used).  It should contain at
least @var{width} * @code{height} bits.  In this case, you must specify
@code{:height} and @code{:width}, both to indicate that the string
contains just the bits rather than a whole XBM file, and to specify the
size of the image.
@end itemize

@item :width @var{width}
The value, @var{width}, specifies the width of the image, in pixels.

@item :height @var{height}
The value, @var{height}, specifies the height of the image, in pixels.
@end table

@node XPM Images
@subsection XPM Images
@cindex XPM

  To use XPM format, specify @code{xpm} as the image type.  The
additional image property @code{:color-symbols} is also meaningful with
the @code{xpm} image type:

@table @code
@item :color-symbols @var{symbols}
The value, @var{symbols}, should be an alist whose elements have the
form @code{(@var{name} . @var{color})}.  In each element, @var{name} is
the name of a color as it appears in the image file, and @var{color}
specifies the actual color to use for displaying that name.
@end table

@node GIF Images
@subsection GIF Images
@cindex GIF

  For GIF images, specify image type @code{gif}.  Because of the patents
in the US covering the LZW algorithm, the continued use of GIF format is
a problem for the whole Internet; to end this problem, it is a good idea
for everyone, even outside the US, to stop using GIFS right away
(@uref{http://www.burnallgifs.org/}).  But if you still want to use
them, Emacs can display them.

@table @code
@item :index @var{index}
You can use @code{:index} to specify one image from a GIF file that
contains more than one image.  This property specifies use of image
number @var{index} from the file.  An error is signaled if the GIF file
doesn't contain an image with index @var{index}.
@end table

@ignore
This could be used to implement limited support for animated GIFs.
For example, the following function displays a multi-image GIF file
at point-min in the current buffer, switching between sub-images
every 0.1 seconds.

(defun show-anim (file max)
  "Display multi-image GIF file FILE which contains MAX subimages."
  (display-anim (current-buffer) file 0 max t))

(defun display-anim (buffer file idx max first-time)
  (when (= idx max)
    (setq idx 0))
  (let ((img (create-image file nil :image idx)))
    (save-excursion
      (set-buffer buffer)
      (goto-char (point-min))
      (unless first-time (delete-char 1))
      (insert-image img))
    (run-with-timer 0.1 nil 'display-anim buffer file (1+ idx) max nil)))
@end ignore

@node Postscript Images
@subsection Postscript Images
@cindex Postscript images

  To use Postscript for an image, specify image type @code{postscript}.
This works only if you have Ghostscript installed.  You must always use
these three properties:

@table @code
@item :pt-width @var{width}
The value, @var{width}, specifies the width of the image measured in
points (1/72 inch).  @var{width} must be an integer.

@item :pt-height @var{height}
The value, @var{height}, specifies the height of the image in points
(1/72 inch).  @var{height} must be an integer.

@item :bounding-box @var{box}
The value, @var{box}, must be a list or vector of four integers, which
specifying the bounding box of the Postscript image, analogous to the
@samp{BoundingBox} comment found in Postscript files.

@example
%%BoundingBox: 22 171 567 738
@end example
@end table

  Displaying Postscript images from Lisp data is not currently
implemented, but it may be implemented by the time you read this.
See the @file{etc/NEWS} file to make sure.

@node Other Image Types
@subsection Other Image Types
@cindex PBM

  For PBM images, specify image type @code{pbm}.  Color, gray-scale and
monochromatic images are supported.   For mono PBM images, two additional
image properties are supported.

@table @code
@item :foreground @var{foreground}
The value, @var{foreground}, should be a string specifying the image
foreground color, or @code{nil} for the default color.  This color is
used for each pixel in the XBM that is 1.  The default is the frame's
foreground color.

@item :background @var{background}
The value, @var{background}, should be a string specifying the image
background color, or @code{nil} for the default color.  This color is
used for each pixel in the XBM that is 0.  The default is the frame's
background color.
@end table

  For JPEG images, specify image type @code{jpeg}.

  For TIFF images, specify image type @code{tiff}.

  For PNG images, specify image type @code{png}.

@node Defining Images
@subsection Defining Images

  The functions @code{create-image}, @code{defimage} and
@code{find-image} provide convenient ways to create image descriptors.

@defun create-image file &optional type &rest props
@tindex create-image
This function creates and returns an image descriptor which uses the
data in @var{file}.

The optional argument @var{type} is a symbol specifying the image type.
If @var{type} is omitted or @code{nil}, @code{create-image} tries to
determine the image type from the file's first few bytes, or else
from the file's name.

The remaining arguments, @var{props}, specify additional image
properties---for example,

@example
(create-image "foo.xpm" 'xpm :heuristic-mask t)
@end example

The function returns @code{nil} if images of this type are not
supported.  Otherwise it returns an image descriptor.
@end defun

@defmac defimage variable doc &rest specs
@tindex defimage
This macro defines @var{variable} as an image name.  The second argument,
@var{doc}, is an optional documentation string.  The remaining
arguments, @var{specs}, specify alternative ways to display the image.

Each argument in @var{specs} has the form of a property list, and each
one should specify at least the @code{:type} property and the
@code{:file} property.  Here is an example:

@example
(defimage test-image
  '((:type xpm :file "~/test1.xpm")
    (:type xbm :file "~/test1.xbm")))
@end example

@code{defimage} tests each argument, one by one, to see if it is
usable---that is, if the type is supported and the file exists.  The
first usable argument is used to make an image descriptor which is
stored in the variable @var{variable}.

If none of the alternatives will work, then @var{variable} is defined
as @code{nil}.
@end defmac

@defun find-image specs
@tindex find-image
This function provides a convenient way to find an image satisfying one
of a list of image specifications @var{specs}.

Each specification in @var{specs} is a property list with contents
depending on image type.  All specifications must at least contain the
properties @code{:type @var{type}} and either @w{@code{:file @var{file}}}
or @w{@code{:data @var{DATA}}}, where @var{type} is a symbol specifying
the image type, e.g.@: @code{xbm}, @var{file} is the file to load the
image from, and @var{data} is a string containing the actual image data.
The first specification in the list whose @var{type} is supported, and
@var{file} exists, is used to construct the image specification to be
returned.  If no specification is satisfied, @code{nil} is returned.

The image is looked for first on @code{load-path} and then in
@code{data-directory}.
@end defun

@node Showing Images
@subsection Showing Images

  You can use an image descriptor by setting up the @code{display}
property yourself, but it is easier to use the functions in this
section.

@defun insert-image image &optional string area
This function inserts @var{image} in the current buffer at point.  The
value @var{image} should be an image descriptor; it could be a value
returned by @code{create-image}, or the value of a symbol defined with
@code{defimage}.  The argument @var{string} specifies the text to put in
the buffer to hold the image.

The argument @var{area} specifies whether to put the image in a margin.
If it is @code{left-margin}, the image appears in the left margin;
@code{right-margin} specifies the right margin.  If @var{area} is
@code{nil} or omitted, the image is displayed at point within the
buffer's text.

Internally, this function inserts @var{string} in the buffer, and gives
it a @code{display} property which specifies @var{image}.  @xref{Display
Property}.
@end defun

@defun put-image image pos &optional string area
This function puts image @var{image} in front of @var{pos} in the
current buffer.  The argument @var{pos} should be an integer or a
marker.  It specifies the buffer position where the image should appear.
The argument @var{string} specifies the text that should hold the image
as an alternative to the default.

The argument @var{image} must be an image descriptor, perhaps returned
by @code{create-image} or stored by @code{defimage}.

The argument @var{area} specifies whether to put the image in a margin.
If it is @code{left-margin}, the image appears in the left margin;
@code{right-margin} specifies the right margin.  If @var{area} is
@code{nil} or omitted, the image is displayed at point within the
buffer's text.

Internally, this function creates an overlay, and gives it a
@code{before-string} property containing text that has a @code{display}
property whose value is the image.  (Whew!)
@end defun

@defun remove-images start end &optional buffer
This function removes images in @var{buffer} between positions
@var{start} and @var{end}.  If @var{buffer} is omitted or @code{nil},
images are removed from the current buffer.

This removes only images that were put into @var{buffer} the way
@code{put-image} does it, not images that were inserted with
@code{insert-image} or in other ways.
@end defun

@defun image-size spec &optional pixels frame
@tindex image-size
This function returns the size of an image as a pair
@w{@code{(@var{width} . @var{height})}}.  @var{spec} is an image
specification.  @var{pixels} non-nil means return sizes measured in
pixels, otherwise return sizes measured in canonical character units
(fractions of the width/height of the frame's default font).
@var{frame} is the frame on which the image will be displayed.
@var{frame} null or omitted means use the selected frame (@pxref{Input
Focus}).
@end defun

@node Image Cache
@subsection Image Cache

  Emacs stores images in an image cache when it displays them, so it can
display them again more efficiently.  It removes an image from the cache
when it hasn't been displayed for a specified period of time.

When an image is looked up in the cache, its specification is compared
with cached image specifications using @code{equal}.  This means that
all images with equal specifications share the same image in the cache.

@defvar image-cache-eviction-delay
@tindex image-cache-eviction-delay
This variable specifies the number of seconds an image can remain in the
cache without being displayed.  When an image is not displayed for this
length of time, Emacs removes it from the image cache.

If the value is @code{nil}, Emacs does not remove images from the cache
except when you explicitly clear it.  This mode can be useful for
debugging.
@end defvar

@defun clear-image-cache &optional frame
@tindex clear-image-cache
This function clears the image cache.  If @var{frame} is non-@code{nil},
only the cache for that frame is cleared.  Otherwise all frames' caches
are cleared.
@end defun

@node Blinking
@section Blinking Parentheses
@cindex parenthesis matching
@cindex blinking
@cindex balancing parentheses
@cindex close parenthesis

  This section describes the mechanism by which Emacs shows a matching
open parenthesis when the user inserts a close parenthesis.

@defvar blink-paren-function
The value of this variable should be a function (of no arguments) to
be called whenever a character with close parenthesis syntax is inserted.
The value of @code{blink-paren-function} may be @code{nil}, in which
case nothing is done.
@end defvar

@defopt blink-matching-paren
If this variable is @code{nil}, then @code{blink-matching-open} does
nothing.
@end defopt

@defopt blink-matching-paren-distance
This variable specifies the maximum distance to scan for a matching
parenthesis before giving up.
@end defopt

@defopt blink-matching-delay
This variable specifies the number of seconds for the cursor to remain
at the matching parenthesis.  A fraction of a second often gives
good results, but the default is 1, which works on all systems.
@end defopt

@deffn Command blink-matching-open
This function is the default value of @code{blink-paren-function}.  It
assumes that point follows a character with close parenthesis syntax and
moves the cursor momentarily to the matching opening character.  If that
character is not already on the screen, it displays the character's
context in the echo area.  To avoid long delays, this function does not
search farther than @code{blink-matching-paren-distance} characters.

Here is an example of calling this function explicitly.

@smallexample
@group
(defun interactive-blink-matching-open ()
@c Do not break this line! -- rms.
@c The first line of a doc string
@c must stand alone.
  "Indicate momentarily the start of sexp before point."
  (interactive)
@end group
@group
  (let ((blink-matching-paren-distance
         (buffer-size))
        (blink-matching-paren t))
    (blink-matching-open)))
@end group
@end smallexample
@end deffn

@node Inverse Video
@section Inverse Video
@cindex Inverse Video

@defopt inverse-video
@cindex highlighting
This variable controls whether Emacs uses inverse video for all text
on the screen.  Non-@code{nil} means yes, @code{nil} means no.  The
default is @code{nil}.
@end defopt

@defopt mode-line-inverse-video
This variable controls the use of inverse video for mode lines and menu
bars.  If it is non-@code{nil}, then these lines are displayed in
inverse video.  Otherwise, these lines are displayed normally, just like
other text.  The default is @code{t}.

For window frames, this feature actually applies the face named
@code{mode-line}; that face is normally set up as the inverse of the
default face, unless you change it.
@end defopt

@node Usual Display
@section Usual Display Conventions

  The usual display conventions define how to display each character
code.  You can override these conventions by setting up a display table
(@pxref{Display Tables}).  Here are the usual display conventions:

@itemize @bullet
@item
Character codes 32 through 126 map to glyph codes 32 through 126.
Normally this means they display as themselves.

@item
Character code 9 is a horizontal tab.  It displays as whitespace
up to a position determined by @code{tab-width}.

@item
Character code 10 is a newline.

@item
All other codes in the range 0 through 31, and code 127, display in one
of two ways according to the value of @code{ctl-arrow}.  If it is
non-@code{nil}, these codes map to sequences of two glyphs, where the
first glyph is the @sc{ascii} code for @samp{^}.  (A display table can
specify a glyph to use instead of @samp{^}.)  Otherwise, these codes map
just like the codes in the range 128 to 255.

On MS-DOS terminals, Emacs arranges by default for the character code
127 to be mapped to the glyph code 127, which normally displays as an
empty polygon.  This glyph is used to display non-@sc{ascii} characters
that the MS-DOS terminal doesn't support.  @xref{MS-DOS and MULE,,,
emacs, The GNU Emacs Manual}.

@item
Character codes 128 through 255 map to sequences of four glyphs, where
the first glyph is the @sc{ascii} code for @samp{\}, and the others are
digit characters representing the character code in octal.  (A display
table can specify a glyph to use instead of @samp{\}.)

@item
Multibyte character codes above 256 are displayed as themselves, or as a
question mark or empty box if the terminal cannot display that
character.
@end itemize

  The usual display conventions apply even when there is a display
table, for any character whose entry in the active display table is
@code{nil}.  Thus, when you set up a display table, you need only
specify the characters for which you want special behavior.

  These display rules apply to carriage return (character code 13), when
it appears in the buffer.  But that character may not appear in the
buffer where you expect it, if it was eliminated as part of end-of-line
conversion (@pxref{Coding System Basics}).

  These variables affect the way certain characters are displayed on the
screen.  Since they change the number of columns the characters occupy,
they also affect the indentation functions.  These variables also affect
how the mode line is displayed; if you want to force redisplay of the
mode line using the new values, call the function
@code{force-mode-line-update} (@pxref{Mode Line Format}).

@defopt ctl-arrow
@cindex control characters in display
This buffer-local variable controls how control characters are
displayed.  If it is non-@code{nil}, they are displayed as a caret
followed by the character: @samp{^A}.  If it is @code{nil}, they are
displayed as a backslash followed by three octal digits: @samp{\001}.
@end defopt

@c Following may have overfull hbox.
@defvar default-ctl-arrow
The value of this variable is the default value for @code{ctl-arrow} in
buffers that do not override it.  @xref{Default Value}.
@end defvar

@defopt indicate-empty-lines
@tindex indicate-empty-lines
When this is non-@code{nil}, Emacs displays a special glyph in
each empty line at the end of the buffer, on terminals that
support it (window systems).
@end defopt

@defopt tab-width
The value of this variable is the spacing between tab stops used for
displaying tab characters in Emacs buffers.  The value is in units of
columns, and the default is 8.  Note that this feature is completely
independent of the user-settable tab stops used by the command
@code{tab-to-tab-stop}.  @xref{Indent Tabs}.
@end defopt

@node Display Tables
@section Display Tables

@cindex display table
You can use the @dfn{display table} feature to control how all possible
character codes display on the screen.  This is useful for displaying
European languages that have letters not in the @sc{ascii} character
set.

The display table maps each character code into a sequence of
@dfn{glyphs}, each glyph being a graphic that takes up one character
position on the screen.  You can also define how to display each glyph
on your terminal, using the @dfn{glyph table}.

Display tables affect how the mode line is displayed; if you want to
force redisplay of the mode line using a new display table, call
@code{force-mode-line-update} (@pxref{Mode Line Format}).

@menu
* Display Table Format::	What a display table consists of.
* Active Display Table::	How Emacs selects a display table to use.
* Glyphs::			How to define a glyph, and what glyphs mean.
@end menu

@node Display Table Format
@subsection Display Table Format

  A display table is actually a char-table (@pxref{Char-Tables}) with
@code{display-table} as its subtype.

@defun make-display-table
This creates and returns a display table.  The table initially has
@code{nil} in all elements.
@end defun

  The ordinary elements of the display table are indexed by character
codes; the element at index @var{c} says how to display the character
code @var{c}.  The value should be @code{nil} or a vector of glyph
values (@pxref{Glyphs}).  If an element is @code{nil}, it says to
display that character according to the usual display conventions
(@pxref{Usual Display}).

  If you use the display table to change the display of newline
characters, the whole buffer will be displayed as one long ``line.''

  The display table also has six ``extra slots'' which serve special
purposes.  Here is a table of their meanings; @code{nil} in any slot
means to use the default for that slot, as stated below.

@table @asis
@item 0
The glyph for the end of a truncated screen line (the default for this
is @samp{$}).  @xref{Glyphs}.  Newer Emacs versions, on some platforms,
display arrows to indicate truncation---the display table has no effect
in these situations.
@item 1
The glyph for the end of a continued line (the default is @samp{\}).
Newer Emacs versions, on some platforms, display curved arrows to
indicate truncation---the display table has no effect in these
situations.
@item 2
The glyph for indicating a character displayed as an octal character
code (the default is @samp{\}).
@item 3
The glyph for indicating a control character (the default is @samp{^}).
@item 4
A vector of glyphs for indicating the presence of invisible lines (the
default is @samp{...}).  @xref{Selective Display}.
@item 5
The glyph used to draw the border between side-by-side windows (the
default is @samp{|}).  @xref{Splitting Windows}.  This takes effect only
when there are no scroll bars; if scroll bars are supported and in use,
a scroll bar separates the two windows.
@end table

  For example, here is how to construct a display table that mimics the
effect of setting @code{ctl-arrow} to a non-@code{nil} value:

@example
(setq disptab (make-display-table))
(let ((i 0))
  (while (< i 32)
    (or (= i ?\t) (= i ?\n)
        (aset disptab i (vector ?^ (+ i 64))))
    (setq i (1+ i)))
  (aset disptab 127 (vector ?^ ??)))
@end example

@defun display-table-slot display-table slot
This function returns the value of the extra slot @var{slot} of
@var{display-table}.  The argument @var{slot} may be a number from 0 to
5 inclusive, or a slot name (symbol).  Valid symbols are
@code{truncation}, @code{wrap}, @code{escape}, @code{control},
@code{selective-display}, and @code{vertical-border}.
@end defun

@defun set-display-table-slot display-table slot value
This function stores @var{value} in the extra slot @var{slot} of
@var{display-table}.  The argument @var{slot} may be a number from 0 to
5 inclusive, or a slot name (symbol).  Valid symbols are
@code{truncation}, @code{wrap}, @code{escape}, @code{control},
@code{selective-display}, and @code{vertical-border}.
@end defun

@defun describe-display-table display-table
@tindex describe-display-table
This function displays a description of the display table
@var{display-table} in a help buffer.
@end defun

@deffn Command describe-current-display-table
@tindex describe-current-display-table
This command displays a description of the current display table in a
help buffer.
@end deffn

@node Active Display Table
@subsection Active Display Table
@cindex active display table

  Each window can specify a display table, and so can each buffer.  When
a buffer @var{b} is displayed in window @var{w}, display uses the
display table for window @var{w} if it has one; otherwise, the display
table for buffer @var{b} if it has one; otherwise, the standard display
table if any.  The display table chosen is called the @dfn{active}
display table.

@defun window-display-table window
This function returns @var{window}'s display table, or @code{nil}
if @var{window} does not have an assigned display table.
@end defun

@defun set-window-display-table window table
This function sets the display table of @var{window} to @var{table}.
The argument @var{table} should be either a display table or
@code{nil}.
@end defun

@defvar buffer-display-table
This variable is automatically buffer-local in all buffers; its value in
a particular buffer specifies the display table for that buffer.  If it
is @code{nil}, that means the buffer does not have an assigned display
table.
@end defvar

@defvar standard-display-table
This variable's value is the default display table, used whenever a
window has no display table and neither does the buffer displayed in
that window.  This variable is @code{nil} by default.
@end defvar

  If there is no display table to use for a particular window---that is,
if the window specifies none, its buffer specifies none, and
@code{standard-display-table} is @code{nil}---then Emacs uses the usual
display conventions for all character codes in that window.  @xref{Usual
Display}.

A number of functions for changing the standard display table
are defined in the library @file{disp-table}.

@node Glyphs
@subsection Glyphs

@cindex glyph
  A @dfn{glyph} is a generalization of a character; it stands for an
image that takes up a single character position on the screen.  Glyphs
are represented in Lisp as integers, just as characters are.

@cindex glyph table
  The meaning of each integer, as a glyph, is defined by the glyph
table, which is the value of the variable @code{glyph-table}.

@defvar glyph-table
The value of this variable is the current glyph table.  It should be a
vector; the @var{g}th element defines glyph code @var{g}.  If the value
is @code{nil} instead of a vector, then all glyphs are simple (see
below).  The glyph table is not used on windowed displays.
@end defvar

  Here are the possible types of elements in the glyph table:

@table @asis
@item @var{string}
Send the characters in @var{string} to the terminal to output
this glyph.  This alternative is available on character terminals,
but not under a window system.

@item @var{integer}
Define this glyph code as an alias for glyph code @var{integer}.  You
can use an alias to specify a face code for the glyph; see below.

@item @code{nil}
This glyph is simple.  On an ordinary terminal, the glyph code mod
524288 is the character to output.  In a window system, the glyph code
mod 524288 is the character to output, and the glyph code divided by
524288 specifies the face number (@pxref{Face Functions}) to use while
outputting it.  (524288 is
@ifnottex
2**19.)
@end ifnottex
@tex
$2^{19}$.)
@end tex
@xref{Faces}.
@end table

  If a glyph code is greater than or equal to the length of the glyph
table, that code is automatically simple.

@defun create-glyph string
@tindex create-glyph
This function returns a newly-allocated glyph code which is set up to
display by sending @var{string} to the terminal.
@end defun

@node Beeping
@section Beeping
@cindex beeping
@cindex bell

  This section describes how to make Emacs ring the bell (or blink the
screen) to attract the user's attention.  Be conservative about how
often you do this; frequent bells can become irritating.  Also be
careful not to use just beeping when signaling an error is more
appropriate.  (@xref{Errors}.)

@defun ding &optional do-not-terminate
@cindex keyboard macro termination
This function beeps, or flashes the screen (see @code{visible-bell} below).
It also terminates any keyboard macro currently executing unless
@var{do-not-terminate} is non-@code{nil}.
@end defun

@defun beep &optional do-not-terminate
This is a synonym for @code{ding}.
@end defun

@defopt visible-bell
This variable determines whether Emacs should flash the screen to
represent a bell.  Non-@code{nil} means yes, @code{nil} means no.  This
is effective on a window system, and on a character-only terminal
provided the terminal's Termcap entry defines the visible bell
capability (@samp{vb}).
@end defopt

@defvar ring-bell-function
If this is non-@code{nil}, it specifies how Emacs should ``ring the
bell.''  Its value should be a function of no arguments.  If this is
non-@code{nil}, it takes precedence over the @code{visible-bell}
variable.
@end defvar

@node Window Systems
@section Window Systems

  Emacs works with several window systems, most notably the X Window
System.  Both Emacs and X use the term ``window'', but use it
differently.  An Emacs frame is a single window as far as X is
concerned; the individual Emacs windows are not known to X at all.

@defvar window-system
This variable tells Lisp programs what window system Emacs is running
under.  The possible values are

@table @code
@item x
@cindex X Window System
Emacs is displaying using X.
@item pc
Emacs is displaying using MS-DOS.
@item w32
Emacs is displaying using Windows.
@item mac
Emacs is displaying using a Macintosh.
@item nil
Emacs is using a character-based terminal.
@end table
@end defvar

@defvar window-setup-hook
This variable is a normal hook which Emacs runs after handling the
initialization files.  Emacs runs this hook after it has completed
loading your init file, the default initialization file (if
any), and the terminal-specific Lisp code, and running the hook
@code{term-setup-hook}.

This hook is used for internal purposes: setting up communication with
the window system, and creating the initial window.  Users should not
interfere with it.
@end defvar
